# app/ftp_zoomagazin_data_service/ftp_zoomagazin_conv.py
# -*- coding: utf-8 -*-

import os
import logging
from datetime import datetime
from ftplib import FTP, error_perm
from io import BytesIO

try:
    import chardet
except Exception:
    chardet = None

# =========================
# –ù–ê–°–¢–†–û–ô–ö–ò
# =========================
FTP_HOST = os.getenv("ZOOMAGAZIN_FTP_HOST", "164.92.213.254")
FTP_PORT = int(os.getenv("ZOOMAGAZIN_FTP_PORT", "21"))
FTP_USER = os.getenv("ZOOMAGAZIN_FTP_USER", "anonymous")
FTP_PASS = os.getenv("ZOOMAGAZIN_FTP_PASS", "")

# –ö–∞–Ω–¥–∏–¥–∞—Ç—ã –≤—Ö–æ–¥—è—â–µ–π –ø–∞–ø–∫–∏ (–ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω)
INCOMING_DIR_CANDIDATES = [
    os.getenv("ZOOMAGAZIN_INCOMING_DIR", "/tabletki-uploads"),
    "/upload",
]

DEFAULT_FILE_TYPE = "catalog"  # –∏–ª–∏ "stock"

logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)


# =========================
# –£–¢–ò–õ–ò–¢–´
# =========================
def _join_ftp(*parts: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è FTP-–ø—É—Ç–∏."""
    cleaned = [str(p).strip("/") for p in parts if p]
    return "/" if not cleaned else ("/" + "/".join(cleaned))


def _safe_cwd(ftp: FTP, path: str) -> bool:
    try:
        ftp.cwd(path)
        return True
    except Exception:
        return False


def _connect() -> FTP:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ FTP-—Å–µ—Å—Å–∏–∏ —Å —Ä–µ–∂–∏–º–æ–º –∏–º—ë–Ω latin1 –∏ –ø–æ–ø—ã—Ç–∫–æ–π –≤—ã–∫–ª—é—á–∏—Ç—å UTF8.
    –≠—Ç–æ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –∏–º—ë–Ω, –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –Ω–µ –≤ UTF-8.
    """
    ftp = FTP()
    ftp.encoding = "latin1"
    ftp.connect(FTP_HOST, FTP_PORT, timeout=30)
    ftp.login(FTP_USER, FTP_PASS)
    # –∫–ª—é—á–µ–≤–æ–π –º–æ–º–µ–Ω—Ç: –ø—Ä–æ—Å–∏–º —Å–µ—Ä–≤–µ—Ä –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å UTF8 –¥–ª—è –∏–º—ë–Ω
    try:
        ftp.sendcmd("OPTS UTF8 OFF")
    except Exception:
        pass
    return ftp


def _mdtm_or_none(ftp: FTP, name: str):
    """–ß–∏—Ç–∞–µ—Ç MDTM (–¥–∞—Ç—É/–≤—Ä–µ–º—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ) –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è."""
    try:
        resp = ftp.sendcmd(f"MDTM {name}")
        if resp.startswith("213 "):
            return datetime.strptime(resp[4:].strip(), "%Y%m%d%H%M%S")
    except Exception:
        pass
    return None


def _list_json_files_with_mtime(ftp: FTP, incoming_abs: str):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ [(name, mtime)], –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ —É–±—ã–≤–∞–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏.
    –ò–º–µ–Ω–∞ ‚Äî –∫–∞–∫ –≤–µ—Ä–Ω—É–ª —Å–µ—Ä–≤–µ—Ä (latin1).
    """
    if not _safe_cwd(ftp, incoming_abs):
        raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –≤—Ö–æ–¥—è—â—É—é –ø–∞–ø–∫—É: {incoming_abs}")

    try:
        names = ftp.nlst()
    except error_perm as e:
        if "No files found" in str(e):
            names = []
        else:
            raise

    json_names = [n for n in names if n.lower().endswith(".json")]
    pairs = []
    for n in json_names:
        pairs.append((n, _mdtm_or_none(ftp, n)))

    pairs.sort(key=lambda t: (t[1] or datetime.min), reverse=True)
    return pairs


def _decode_bytes(raw: bytes) -> str:
    """–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ JSON —Å –º–Ω–æ–≥–æ—Å—Ç—É–ø–µ–Ω—á–∞—Ç—ã–º fallback."""
    for enc in ("utf-8", "utf-8-sig", "cp1251", "latin1"):
        try:
            return raw.decode(enc)
        except UnicodeDecodeError:
            pass
    if chardet:
        enc = chardet.detect(raw).get("encoding") or "utf-8"
        try:
            return raw.decode(enc, errors="replace")
        except Exception:
            pass
    return raw.decode("latin1", errors="replace")


def _download_to_string(ftp: FTP, directory: str, filename: str) -> str:
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –±–∏–Ω–∞—Ä–Ω–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç.
    –ù–µ –¥–µ–ª–∞–µ–º cwd; RETR –∏–¥—ë—Ç –ø–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ–º—É –ø—É—Ç–∏.
    –î–µ–ª–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫ –∏–º–µ–Ω–∏ (–∫–∞–≤—ã—á–∫–∏, —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–±–µ–ª–æ–≤, –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∫–∏).
    """
    abs_name = _join_ftp(directory, filename)

    def _retr(name: str) -> bytes:
        buf = BytesIO()
        ftp.sendcmd("TYPE I")
        ftp.retrbinary("RETR " + name, buf.write)
        return buf.getvalue()

    # –ö–∞–Ω–¥–∏–¥–∞—Ç—ã –∏–º—ë–Ω (–≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤)
    candidates = [abs_name]

    # –í –∫–∞–≤—ã—á–∫–∞—Ö
    if not (abs_name.startswith('"') and abs_name.endswith('"')):
        candidates.append(f'"{abs_name}"')

    # –° —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ–±–µ–ª–æ–≤
    if " " in abs_name and r"\ " not in abs_name:
        candidates.append(abs_name.replace(" ", r"\ "))

    # –ü–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    try:
        candidates.append(abs_name.encode("latin1", "ignore").decode("cp1251", "ignore"))
    except Exception:
        pass
    try:
        candidates.append(abs_name.encode("latin1", "ignore").decode("utf-8", "ignore"))
    except Exception:
        pass

    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏ –∏ –ø—É—Å—Ç—ã–µ
    seen = set()
    candidates = [c for c in candidates if c and not (c in seen or seen.add(c))]

    last_exc = None
    for cand in candidates:
        try:
            raw = _retr(cand)
            return _decode_bytes(raw)
        except Exception as e:
            last_exc = e
            continue

    # –ù–∏—á–µ–≥–æ –Ω–µ –≤—ã—à–ª–æ
    raise last_exc if last_exc else error_perm("550 Failed to open file.")



def _normalize_dst_name(file_type: str, filename: str) -> str:
    """
    –õ–æ–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: 'catalog-<basename>.json' / 'stock-<basename>.json'
    –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ –∏ –¥–≤–æ–π–Ω–æ–≥–æ .json.
    """
    base, _ext = os.path.splitext(filename)
    low = base.lower()
    if low.startswith("catalog-"):
        base = base[8:]
    elif low.startswith("stock-"):
        base = base[6:]
    prefix = "catalog" if file_type == "catalog" else "stock"
    return f"{prefix}-{base}.json"


def _delete_all_except(ftp: FTP, directory: str, keep_name: str):
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ .json —Ñ–∞–π–ª—ã, –∫—Ä–æ–º–µ keep_name, –≤ –∑–∞–¥–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞ FTP."""
    if not _safe_cwd(ftp, directory):
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–π—Ç–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—á–∏—Å—Ç–∫–∏: %s", directory)
        return
    try:
        names = ftp.nlst()
    except Exception as e:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏: %s", e)
        return

    for n in names:
        if n == keep_name:
            continue
        if not n.lower().endswith(".json"):
            continue
        try:
            ftp.delete(n)
            logger.info("üóë –£–¥–∞–ª—ë–Ω —Ñ–∞–π–ª: %s", _join_ftp(directory, n))
        except Exception as e:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å %s: %s", n, e)


# =========================
# –•–£–ö–ò –û–¢–ü–†–ê–í–ö–ò –î–ê–ù–ù–´–• –î–ê–õ–¨–®–ï
# =========================
from app.services.database_service import process_database_service  # noqa: E402


async def send_catalog_data(file_path: str, enterprise_code: int):
    await process_database_service(file_path, "catalog", enterprise_code)


async def send_stock_data(file_path: str, enterprise_code: int):
    await process_database_service(file_path, "stock", enterprise_code)


# =========================
# –û–°–ù–û–í–ù–û–ô –°–¶–ï–ù–ê–†–ò–ô
# =========================
def run_service(enterprise_code: int, file_type: str = DEFAULT_FILE_TYPE) -> bool:
    """
    1) –ù–∞—Ö–æ–¥–∏–º —Ä–∞–±–æ—á—É—é –≤—Ö–æ–¥—è—â—É—é –ø–∞–ø–∫—É –Ω–∞ FTP.
    2) –ë–µ—Ä—ë–º —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π .json.
    3) –°–∫–∞—á–∏–≤–∞–µ–º ‚Üí –¥–µ–∫–æ–¥–∏—Ä—É–µ–º ‚Üí —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ (./temp/<code>/...json).
    4) –ü–µ—Ä–µ–¥–∞—ë–º –¥–∞–ª—å—à–µ (catalog/stock).
    5) –£–¥–∞–ª—è–µ–º –Ω–∞ FTP –≤—Å–µ –¥—Ä—É–≥–∏–µ .json-—Ñ–∞–π–ª—ã, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π.
    """
    ftp = None
    try:
        ftp = _connect()

        incoming_abs = None
        for cand in INCOMING_DIR_CANDIDATES:
            if _safe_cwd(ftp, cand):
                incoming_abs = cand
                break
        if not incoming_abs:
            raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –≤—Ö–æ–¥—è—â–∞—è –ø–∞–ø–∫–∞ —Å—Ä–µ–¥–∏: " + ", ".join(INCOMING_DIR_CANDIDATES))

        files = _list_json_files_with_mtime(ftp, incoming_abs)
        if not files:
            logger.info("–ù–µ—Ç JSON-—Ñ–∞–π–ª–æ–≤ –≤–æ –≤—Ö–æ–¥—è—â–µ–π –ø–∞–ø–∫–µ.")
            return True

        latest_name, latest_mtime = files[0]
        logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: %s (mtime=%s)", _join_ftp(incoming_abs, latest_name), latest_mtime or "‚Äî")

        text = _download_to_string(ftp, incoming_abs, latest_name)

        # –ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        temp_dir = os.path.join(".", "temp", str(enterprise_code))
        os.makedirs(temp_dir, exist_ok=True)
        out_name = _normalize_dst_name(file_type, latest_name)
        out_path = os.path.join(temp_dir, out_name)
        with open(out_path, "w", encoding="utf-8") as f:
            f.write(text)
        logger.info("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: %s", out_path)

        # –ø–µ—Ä–µ–¥–∞—á–∞ –¥–∞–ª—å—à–µ
        import asyncio
        if file_type == "catalog":
            logger.info("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ catalog –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è %s", enterprise_code)
            asyncio.run(send_catalog_data(out_path, enterprise_code))
        else:
            logger.info("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ stock –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è %s", enterprise_code)
            asyncio.run(send_stock_data(out_path, enterprise_code))
        logger.info("–î–∞–Ω–Ω—ã–µ %s —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è %s", file_type, enterprise_code)

        # –æ—á–∏—Å—Ç–∫–∞ FTP: –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª
        _delete_all_except(ftp, incoming_abs, latest_name)
        logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–æ—Å—Ç–∞–≤–ª–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª).")

        return True

    except Exception as e:
        logger.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: %s", e, exc_info=True)
        return False
    finally:
        try:
            if ftp:
                ftp.quit()
        except Exception:
            pass


# =========================
# CLI
# =========================
if __name__ == "__main__":
    import argparse

    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(levelname)s - %(message)s",
    )

    parser = argparse.ArgumentParser(description="FtpZoomagazin processor")
    parser.add_argument("--enterprise", type=int, required=True, help="enterprise_code")
    parser.add_argument("--type", choices=["catalog", "stock"], default=DEFAULT_FILE_TYPE, help="file type to process")
    args = parser.parse_args()

    ok = run_service(args.enterprise, args.type)
    raise SystemExit(0 if ok else 1)
