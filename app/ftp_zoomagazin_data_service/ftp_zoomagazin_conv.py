# app/ftp_zoomagazin_data_service/ftp_zoomagazin_conv.py
# -*- coding: utf-8 -*-

import os
import logging
import asyncio
from datetime import datetime
from ftplib import FTP, error_perm
from io import BytesIO

try:
    import chardet
except Exception:
    chardet = None

# =========================
# –ù–ê–°–¢–†–û–ô–ö–ò
# =========================
FTP_HOST = os.getenv("ZOOMAGAZIN_FTP_HOST", "164.92.213.254")
FTP_PORT = int(os.getenv("ZOOMAGAZIN_FTP_PORT", "21"))
FTP_USER = os.getenv("ZOOMAGAZIN_FTP_USER", "anonymous")
FTP_PASS = os.getenv("ZOOMAGAZIN_FTP_PASS", "")

# –ö–∞–Ω–¥–∏–¥–∞—Ç—ã –≤—Ö–æ–¥—è—â–µ–π –ø–∞–ø–∫–∏ (–ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω)
INCOMING_DIR_CANDIDATES = [
    os.getenv("ZOOMAGAZIN_INCOMING_DIR", "/tabletki-uploads"),
    "/upload",
]

DEFAULT_FILE_TYPE = "catalog"  # –∏–ª–∏ "stock"

logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)


# =========================
# –£–¢–ò–õ–ò–¢–´ (–æ–±—â–∏–µ)
# =========================
def _join_ftp(*parts: str) -> str:
    cleaned = [str(p).strip("/") for p in parts if p]
    return "/" if not cleaned else ("/" + "/".join(cleaned))


def _decode_bytes(raw: bytes) -> str:
    """–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ JSON —Å –º–Ω–æ–≥–æ—Å—Ç—É–ø–µ–Ω—á–∞—Ç—ã–º fallback."""
    for enc in ("utf-8", "utf-8-sig", "cp1251", "latin1"):
        try:
            return raw.decode(enc)
        except UnicodeDecodeError:
            pass
    if chardet:
        enc = chardet.detect(raw).get("encoding") or "utf-8"
        try:
            return raw.decode(enc, errors="replace")
        except Exception:
            pass
    return raw.decode("latin1", errors="replace")


def _normalize_dst_name(file_type: str, filename: str) -> str:
    """
    –õ–æ–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: 'catalog-<basename>.json' / 'stock-<basename>.json'
    –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ –∏ –¥–≤–æ–π–Ω–æ–≥–æ .json.
    """
    base, _ext = os.path.splitext(filename)
    low = base.lower()
    if low.startswith("catalog-"):
        base = base[8:]
    elif low.startswith("stock-"):
        base = base[6:]
    prefix = "catalog" if file_type == "catalog" else "stock"
    return f"{prefix}-{base}.json"


# =========================
# –°–ò–ù–•–†–û–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò FTP (–±—É–¥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –≤ to_thread)
# =========================
def _connect_sync() -> FTP:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ FTP-—Å–µ—Å—Å–∏–∏ —Å —Ä–µ–∂–∏–º–æ–º –∏–º—ë–Ω latin1 –∏ –ø–æ–ø—ã—Ç–∫–æ–π –≤—ã–∫–ª—é—á–∏—Ç—å UTF8 –¥–ª—è –∏–º—ë–Ω.
    –≠—Ç–æ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è —Ñ–∞–π–ª–æ–≤, –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –Ω–µ –≤ UTF-8.
    """
    ftp = FTP()
    ftp.encoding = "latin1"
    ftp.connect(FTP_HOST, FTP_PORT, timeout=30)
    ftp.login(FTP_USER, FTP_PASS)
    try:
        ftp.sendcmd("OPTS UTF8 OFF")   # –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä —É–º–µ–µ—Ç ‚Äî –æ—Ç–∫–ª—é—á–∏–º UTF8-—Ä–µ–∂–∏–º –∏–º—ë–Ω
    except Exception:
        pass
    return ftp


def _safe_cwd_sync(ftp: FTP, path: str) -> bool:
    try:
        ftp.cwd(path)
        return True
    except Exception:
        return False


def _mdtm_or_none_sync(ftp: FTP, name: str):
    try:
        resp = ftp.sendcmd(f"MDTM {name}")
        if resp.startswith("213 "):
            return datetime.strptime(resp[4:].strip(), "%Y%m%d%H%M%S")
    except Exception:
        pass
    return None


def _list_json_files_with_mtime_sync(ftp: FTP, incoming_abs: str):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ [(name, mtime)], –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ —É–±—ã–≤–∞–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏.
    –ò–º–µ–Ω–∞ ‚Äî –∫–∞–∫ –≤–µ—Ä–Ω—É–ª —Å–µ—Ä–≤–µ—Ä (latin1).
    """
    if not _safe_cwd_sync(ftp, incoming_abs):
        raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –≤—Ö–æ–¥—è—â—É—é –ø–∞–ø–∫—É: {incoming_abs}")

    try:
        names = ftp.nlst()
    except error_perm as e:
        if "No files found" in str(e):
            names = []
        else:
            raise

    json_names = [n for n in names if n.lower().endswith(".json")]
    pairs = []
    for n in json_names:
        pairs.append((n, _mdtm_or_none_sync(ftp, n)))

    pairs.sort(key=lambda t: (t[1] or datetime.min), reverse=True)
    return pairs


def _retr_text_sync(ftp: FTP, directory: str, filename: str) -> str:
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –±–∏–Ω–∞—Ä–Ω–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç.
    –í–ê–ñ–ù–û: –¥–ª—è vsftpd –ø–æ–¥ anon_root —Ä–∞–±–æ—Ç–∞–µ–º –¢–û–õ–¨–ö–û —Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º (–ø–æ—Å–ª–µ cwd).
    –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–º–µ–Ω–∏ (./name, –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∫–∏).
    """
    if not _safe_cwd_sync(ftp, directory):
        raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –≤ {directory}")

    def _retr_rel(name: str) -> bytes:
        buf = BytesIO()
        ftp.sendcmd("TYPE I")     # –±–∏–Ω–∞—Ä–Ω—ã–π —Ä–µ–∂–∏–º
        ftp.retrbinary("RETR " + name, buf.write)
        return buf.getvalue()

    candidates = []

    # 1) –∫–∞–∫ –≤–µ—Ä–Ω—É–ª —Å–µ—Ä–≤–µ—Ä
    candidates.append(filename)

    # 2) ./filename
    if not filename.startswith("./"):
        candidates.append("./" + filename)

    # 3) –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∫–∏ –∏–º–µ–Ω–∏ (–µ—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω–æ –æ–Ω–æ –Ω–µ-UTF8)
    try:
        candidates.append(filename.encode("latin1", "ignore").decode("cp1251", "ignore"))
    except Exception:
        pass
    try:
        candidates.append(filename.encode("latin1", "ignore").decode("utf-8", "ignore"))
    except Exception:
        pass

    # —É–±—Ä–∞—Ç—å –¥—É–±–ª–∏ –∏ –ø—É—Å—Ç—ã–µ
    seen = set()
    candidates = [c for c in candidates if c and not (c in seen or seen.add(c))]

    last_exc = None
    for cand in candidates:
        try:
            raw = _retr_rel(cand)
            return _decode_bytes(raw)
        except Exception as e:
            last_exc = e
            continue

    raise last_exc if last_exc else error_perm("550 Failed to open file.")


def _delete_all_except_sync(ftp: FTP, directory: str, keep_name: str):
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ .json —Ñ–∞–π–ª—ã, –∫—Ä–æ–º–µ keep_name, –≤ –∑–∞–¥–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞ FTP."""
    if not _safe_cwd_sync(ftp, directory):
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–π—Ç–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—á–∏—Å—Ç–∫–∏: %s", directory)
        return
    try:
        names = ftp.nlst()
    except Exception as e:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏: %s", e)
        return

    for n in names:
        if n == keep_name:
            continue
        if not n.lower().endswith(".json"):
            continue
        try:
            ftp.delete(n)
            logger.info("üóë –£–¥–∞–ª—ë–Ω —Ñ–∞–π–ª: %s", _join_ftp(directory, n))
        except Exception as e:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å %s: %s", n, e)


def _fetch_latest_text_and_name_sync() -> tuple[str, str, str] | tuple[None, None, None]:
    """
    –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —á–∞—Å—Ç—å —Ä–∞–±–æ—Ç—ã —Å FTP:
      - —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      - –≤—ã–±–æ—Ä –≤—Ö–æ–¥—è—â–µ–π –ø–∞–ø–∫–∏
      - –≤—ã–±–æ—Ä —Å–∞–º–æ–≥–æ —Å–≤–µ–∂–µ–≥–æ .json
      - —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ (–≤ —Ç–µ–∫—Å—Ç)
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (text, latest_name, incoming_abs) –∏–ª–∏ (None, None, None) –µ—Å–ª–∏ —Ñ–∞–π–ª–æ–≤ –Ω–µ—Ç.
    """
    ftp = None
    try:
        ftp = _connect_sync()

        incoming_abs = None
        for cand in INCOMING_DIR_CANDIDATES:
            if _safe_cwd_sync(ftp, cand):
                incoming_abs = cand
                break
        if not incoming_abs:
            raise RuntimeError(
                "–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –≤—Ö–æ–¥—è—â–∞—è –ø–∞–ø–∫–∞ —Å—Ä–µ–¥–∏: " + ", ".join(INCOMING_DIR_CANDIDATES)
            )

        files = _list_json_files_with_mtime_sync(ftp, incoming_abs)
        if not files:
            return (None, None, None)

        latest_name, latest_mtime = files[0]
        logger.info(
            "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: %s (mtime=%s)",
            _join_ftp(incoming_abs, latest_name),
            latest_mtime or "‚Äî",
        )

        text = _retr_text_sync(ftp, incoming_abs, latest_name)
        return (text, latest_name, incoming_abs)

    finally:
        try:
            if ftp:
                ftp.quit()
        except Exception:
            pass


def _delete_all_except_wrapper_sync(incoming_abs: str, latest_name: str):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤—É—é FTP-—Å–µ—Å—Å–∏—é –∏ —É–¥–∞–ª—è–µ—Ç –≤—Å–µ .json, –∫—Ä–æ–º–µ latest_name, –≤ incoming_abs."""
    ftp = None
    try:
        ftp = _connect_sync()
        _delete_all_except_sync(ftp, incoming_abs, latest_name)
    finally:
        try:
            if ftp:
                ftp.quit()
        except Exception:
            pass


# =========================
# –•–£–ö–ò –û–¢–ü–†–ê–í–ö–ò –î–ê–ù–ù–´–• –î–ê–õ–¨–®–ï (–≤–∞—à–∏ async-—Ñ—É–Ω–∫—Ü–∏–∏)
# =========================
from app.services.database_service import process_database_service  # noqa: E402


async def send_catalog_data(file_path: str, enterprise_code: int):
    await process_database_service(file_path, "catalog", enterprise_code)


async def send_stock_data(file_path: str, enterprise_code: int):
    await process_database_service(file_path, "stock", enterprise_code)


# =========================
# –û–°–ù–û–í–ù–û–ô –ê–°–ò–ù–•–†–û–ù–ù–´–ô –°–¶–ï–ù–ê–†–ò–ô
# =========================
async def run_service(enterprise_code: int, file_type: str = DEFAULT_FILE_TYPE) -> bool:
    """
    async:
      1) (to_thread) –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–∞–º–æ–≥–æ —Å–≤–µ–∂–µ–≥–æ .json –∏ –µ–≥–æ –∏–º—è/–∫–∞—Ç–∞–ª–æ–≥.
      2) –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ (./temp/<code>/...json) —Å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º.
      3) await –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–ª—å—à–µ (catalog/stock).
      4) (to_thread) –£–¥–∞–ª—è–µ–º –Ω–∞ FTP –≤—Å–µ –¥—Ä—É–≥–∏–µ .json, –∫—Ä–æ–º–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True/False ‚Äî –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –±–µ–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫.
    """
    try:
        # 1) –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–π —Ñ–∞–π–ª (—Ä–∞–±–æ—Ç–∞ —Å FTP –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ)
        text, latest_name, incoming_abs = await asyncio.to_thread(_fetch_latest_text_and_name_sync)
        if not latest_name:
            logger.info("–ù–µ—Ç JSON-—Ñ–∞–π–ª–æ–≤ –≤–æ –≤—Ö–æ–¥—è—â–µ–π –ø–∞–ø–∫–µ.")
            return True

        # 2) –õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        temp_dir = os.path.join(".", "temp", str(enterprise_code))
        os.makedirs(temp_dir, exist_ok=True)
        out_name = _normalize_dst_name(file_type, latest_name)
        out_path = os.path.join(temp_dir, out_name)
        # –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª ‚Äî —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è, –Ω–æ –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–∞—è
        with open(out_path, "w", encoding="utf-8") as f:
            f.write(text)
        logger.info("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: %s", out_path)

        # 3) –ü–µ—Ä–µ–¥–∞—á–∞ –¥–∞–ª—å—à–µ
        if file_type == "catalog":
            logger.info("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ catalog –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è %s", enterprise_code)
            await send_catalog_data(out_path, enterprise_code)
        else:
            logger.info("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ stock –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è %s", enterprise_code)
            await send_stock_data(out_path, enterprise_code)
        logger.info("–î–∞–Ω–Ω—ã–µ %s —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è %s", file_type, enterprise_code)

        # 4) –û—á–∏—Å—Ç–∫–∞ FTP: –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª
        await asyncio.to_thread(_delete_all_except_wrapper_sync, incoming_abs, latest_name)
        logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–æ—Å—Ç–∞–≤–ª–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª).")

        return True

    except Exception as e:
        logger.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ run_service: %s", e, exc_info=True)
        return False


# =========================
# CLI (–¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞)
# =========================
if __name__ == "__main__":
    import argparse

    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(levelname)s - %(message)s",
    )

    parser = argparse.ArgumentParser(description="FtpZoomagazin processor (async)")
    parser.add_argument("--enterprise", type=int, required=True, help="enterprise_code")
    parser.add_argument("--type", choices=["catalog", "stock"], default=DEFAULT_FILE_TYPE, help="file type to process")
    args = parser.parse_args()

    async def _amain():
        ok = await run_service(args.enterprise, args.type)
        raise SystemExit(0 if ok else 1)

    asyncio.run(_amain())
