# app/ftp_zoomagazin_data_service/ftp_zoomagazin_conv.py
# -*- coding: utf-8 -*-

import os
import logging
from datetime import datetime
from ftplib import FTP, error_perm
from io import BytesIO

try:
    import chardet
except Exception:  # chardet –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    chardet = None

# =========================
# –ù–ê–°–¢–†–û–ô–ö–ò (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ .env)
# =========================
FTP_HOST = os.getenv("ZOOMAGAZIN_FTP_HOST", "164.92.213.254")
FTP_PORT = int(os.getenv("ZOOMAGAZIN_FTP_PORT", "21"))
FTP_USER = os.getenv("ZOOMAGAZIN_FTP_USER", "anonymous")
FTP_PASS = os.getenv("ZOOMAGAZIN_FTP_PASS", "")

# –û—Å–Ω–æ–≤–Ω–∞—è –≤—Ö–æ–¥—è—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è. –°–∫—Ä–∏–ø—Ç –ø–æ–ø—Ä–æ–±—É–µ—Ç –∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É, –µ—Å–ª–∏ –ø–µ—Ä–≤–∞—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.
INCOMING_DIR_CANDIDATES = [
    os.getenv("ZOOMAGAZIN_INCOMING_DIR", "/tabletki-uploads"),
    "/upload",
]

# –¢–∏–ø —Ñ–∞–π–ª–∞: "catalog" –∏–ª–∏ "stock" ‚Äî —Å—é–¥–∞ –ø—Ä–∏–¥—ë—Ç –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
DEFAULT_FILE_TYPE = "catalog"

# –õ–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)


# =========================
# –£–¢–ò–õ–ò–¢–´
# =========================
def _join_ftp(*parts: str) -> str:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —Å–æ–µ–¥–∏–Ω—è–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—É—Ç–∏ –¥–ª—è FTP (–±–µ–∑ –¥–≤–æ–π–Ω—ã—Ö —Å–ª—ç—à)."""
    cleaned = []
    for p in parts:
        if not p:
            continue
        cleaned.append(str(p).strip("/"))
    if not cleaned:
        return "/"
    return "/" + "/".join(cleaned)


def _safe_cwd(ftp: FTP, path: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥."""
    try:
        ftp.cwd(path)
        return True
    except Exception:
        return False


def _connect() -> FTP:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç FTP-—Å–µ—Å—Å–∏—é. –î–ª—è –∏–º—ë–Ω —Ñ–∞–π–ª–æ–≤ ‚Äî –∫–æ–¥–∏—Ä–æ–≤–∫–∞ latin1 (–±–µ–∑ –æ—à–∏–±–æ–∫)."""
    ftp = FTP()
    ftp.encoding = "latin1"  # –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è ¬´–±–∏—Ç—ã—Ö¬ª –∏–º—ë–Ω
    ftp.connect(FTP_HOST, FTP_PORT, timeout=30)
    ftp.login(FTP_USER, FTP_PASS)
    return ftp


def _mdtm_or_none(ftp: FTP, name: str):
    """–ß–∏—Ç–∞–µ—Ç MDTM (–≤—Ä–µ–º—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ), –ª–∏–±–æ None, –µ—Å–ª–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è."""
    try:
        resp = ftp.sendcmd(f"MDTM {name}")
        # –û—Ç–≤–µ—Ç –≤–∏–¥: "213 YYYYMMDDHHMMSS"
        if resp.startswith("213 "):
            dt = datetime.strptime(resp[4:].strip(), "%Y%m%d%H%M%S")
            return dt
    except Exception:
        pass
    return None


def _list_json_files_with_mtime(ftp: FTP, incoming_abs: str):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ [(name, mtime)], –≥–¥–µ name ‚Äî –∫–∞–∫ –≤–µ—Ä–Ω—É–ª —Å–µ—Ä–≤–µ—Ä (latin1),
    mtime ‚Äî datetime –∏–ª–∏ None. –°–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–æ mtime (—Å–≤–µ–∂–∏–µ —Å–≤–µ—Ä—Ö—É).
    """
    # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –≤ –ø–∞–ø–∫—É
    if not _safe_cwd(ftp, incoming_abs):
        raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –≤—Ö–æ–¥—è—â—É—é –ø–∞–ø–∫—É: {incoming_abs}")

    try:
        names = ftp.nlst()
    except error_perm as e:
        # –ü—É—Å—Ç–∞—è –ø–∞–ø–∫–∞ –º–æ–∂–µ—Ç –¥–∞—Ç—å "550 No files found"
        if "No files found" in str(e):
            names = []
        else:
            raise

    json_names = [n for n in names if n.lower().endswith(".json")]
    files = []
    for n in json_names:
        mtime = _mdtm_or_none(ftp, n)
        files.append((n, mtime))

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: —Å–ø–µ—Ä–≤–∞ —Å mtime (–ø–æ —É–±—ã–≤–∞–Ω–∏—é), –∑–∞—Ç–µ–º –ø–æ –∏–º–µ–Ω–∏
    files.sort(key=lambda t: (t[1] or datetime.min), reverse=True)
    return files


def _decode_bytes(raw: bytes) -> str:
    """–î–µ–∫–æ–¥–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ JSON —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ —Ñ–æ–ª–ª–±—ç–∫–∞–º–∏."""
    # 1) —á–∏—Å—Ç—ã–π UTF-8
    try:
        return raw.decode("utf-8")
    except UnicodeDecodeError:
        pass
    # 2) UTF-8 —Å BOM
    try:
        return raw.decode("utf-8-sig")
    except UnicodeDecodeError:
        pass
    # 3) cp1251
    try:
        return raw.decode("cp1251")
    except UnicodeDecodeError:
        pass
    # 4) latin1 –∫–∞–∫ ¬´–ø–æ—Å–ª–µ–¥–Ω—è—è —Å–æ–ª–æ–º–∏–Ω–∫–∞¬ª
    try:
        return raw.decode("latin1")
    except UnicodeDecodeError:
        pass
    # 5) chardet (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if chardet:
        enc = chardet.detect(raw).get("encoding") or "utf-8"
        try:
            return raw.decode(enc, errors="replace")
        except Exception:
            return raw.decode("latin1", errors="replace")
    # —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–æ–ª–ª–±—ç–∫
    return raw.decode("latin1", errors="replace")


def _download_to_string(ftp: FTP, directory: str, filename: str) -> str:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –±–∏–Ω–∞—Ä–Ω–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –∞–≤—Ç–æ-–¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
    # cwd –¥–µ–ª–∞–µ–º –∫–∞–∂–¥—ã–π —Ä–∞–∑ —è–≤–Ω–æ ‚Äî –∏–Ω–∞—á–µ RETR —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ
    if not _safe_cwd(ftp, directory):
        raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –≤ {directory}")

    buf = BytesIO()
    ftp.retrbinary(f"RETR {filename}", buf.write)
    raw = buf.getvalue()
    return _decode_bytes(raw)


def _normalize_dst_name(file_type: str, filename: str) -> str:
    """
    –ü—Ä–∏–≤–æ–¥–∏—Ç –∏–º—è –∫ –≤–∏–¥—É: 'catalog-<basename>.json' –∏–ª–∏ 'stock-<basename>.json'
    –±–µ–∑ –¥–≤–æ–π–Ω—ã—Ö –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤/—Å—É—Ñ—Ñ–∏–∫—Å–æ–≤.
    """
    base, ext = os.path.splitext(filename)  # ext –º–æ–∂–µ—Ç –±—ã—Ç—å '.json' —É–∂–µ
    # —É–±—Ä–∞—Ç—å –ø–æ–≤—Ç–æ—Ä—ã –ø—Ä–µ—Ñ–∏–∫—Å–∞
    low = base.lower()
    if low.startswith("catalog-"):
        base = base[8:]
    if low.startswith("stock-"):
        base = base[6:]
    # —Å–æ–±—Ä–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ
    prefix = "catalog" if file_type == "catalog" else "stock"
    return f"{prefix}-{base}.json"


def _delete_all_except(ftp: FTP, directory: str, keep_name: str):
    """
    –£–¥–∞–ª—è–µ—Ç –≤ –ø–∞–ø–∫–µ –≤—Å–µ .json —Ñ–∞–π–ª—ã, –∫—Ä–æ–º–µ keep_name.
    –û—à–∏–±–∫–∏ –ø–æ –∫–∞–∂–¥–æ–º—É —Ñ–∞–π–ª—É –ª–æ–≥–∏—Ä—É–µ–º, –Ω–æ –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º.
    """
    if not _safe_cwd(ftp, directory):
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–π—Ç–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—á–∏—Å—Ç–∫–∏: %s", directory)
        return

    try:
        names = ftp.nlst()
    except Exception as e:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏: %s", e)
        return

    for n in names:
        if n == keep_name:
            continue
        if not n.lower().endswith(".json"):
            continue
        try:
            ftp.delete(n)
            logger.info("üóë –£–¥–∞–ª—ë–Ω —Ñ–∞–π–ª: %s", _join_ftp(directory, n))
        except Exception as e:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å %s: %s", n, e)


# =========================
# –í–ê–®–ò –í–ù–£–¢–†–ï–ù–ù–ò–ï –•–£–ö–ò –û–¢–ü–†–ê–í–ö–ò
# =========================
# –í –ø—Ä–æ–µ–∫—Ç–µ —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ —É–∂–µ –µ—Å—Ç—å, –ø—Ä–æ—Å—Ç–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º
from app.services.database_service import process_database_service  # noqa: E402


async def send_catalog_data(file_path: str, enterprise_code: int):
    await process_database_service(file_path, "catalog", enterprise_code)


async def send_stock_data(file_path: str, enterprise_code: int):
    await process_database_service(file_path, "stock", enterprise_code)


# =========================
# –û–°–ù–û–í–ù–û–ô –ó–ê–ü–£–°–ö –î–õ–Ø –û–î–ù–û–ì–û –ü–†–ï–î–ü–†–ò–Ø–¢–ò–Ø
# =========================
def run_service(enterprise_code: int, file_type: str = DEFAULT_FILE_TYPE) -> bool:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π:
      1) —Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è —Å FTP –∏ –Ω–∞—Ö–æ–¥–∏–º —Ä–∞–±–æ—á—É—é –≤—Ö–æ–¥—è—â—É—é –ø–∞–ø–∫—É;
      2) –∏—â–µ–º —Å–ø–∏—Å–æ–∫ .json, –±–µ—Ä—ë–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π;
      3) —Å–∫–∞—á–∏–≤–∞–µ–º –µ–≥–æ, –¥–µ–∫–æ–¥–∏—Ä—É–µ–º, –ø–∏—à–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª;
      4) –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–ª—å—à–µ (catalog/stock);
      5) —É–¥–∞–ª—è–µ–º –í–°–ï –æ—Å—Ç–∞–ª—å–Ω—ã–µ .json —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ, –ø–æ—Å–ª–µ–¥–Ω–∏–π (–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π) –æ—Å—Ç–∞–≤–ª—è–µ–º;
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True/False ‚Äî –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –±–µ–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫.
    """
    ftp = None
    try:
        ftp = _connect()

        # –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—á—É—é –≤—Ö–æ–¥—è—â—É—é –ø–∞–ø–∫—É
        incoming_abs = None
        for cand in INCOMING_DIR_CANDIDATES:
            if _safe_cwd(ftp, cand):
                incoming_abs = cand
                break
        if not incoming_abs:
            raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –≤—Ö–æ–¥—è—â–∞—è –ø–∞–ø–∫–∞ —Å—Ä–µ–¥–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: " + ", ".join(INCOMING_DIR_CANDIDATES))

        files = _list_json_files_with_mtime(ftp, incoming_abs)
        if not files:
            logger.info("–ù–µ—Ç JSON-—Ñ–∞–π–ª–æ–≤ –≤–æ –≤—Ö–æ–¥—è—â–µ–π –ø–∞–ø–∫–µ.")
            return True

        latest_name, latest_mtime = files[0]
        logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: %s (mtime=%s)", _join_ftp(incoming_abs, latest_name), latest_mtime or "‚Äî")

        # —Å–∫–∞—á–∞—Ç—å –∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        text = _download_to_string(ftp, incoming_abs, latest_name)

        # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª (–¥–ª—è –≤–∞—à–∏—Ö downstream-—Å–µ—Ä–≤–∏—Å–æ–≤)
        temp_dir = os.path.join(".", "temp", str(enterprise_code))
        os.makedirs(temp_dir, exist_ok=True)
        safe_out_name = _normalize_dst_name(file_type, latest_name)
        out_path = os.path.join(temp_dir, safe_out_name)
        with open(out_path, "w", encoding="utf-8") as f:
            f.write(text)

        logger.info("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: %s", out_path)

        # –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–ª—å—à–µ
        import asyncio
        if file_type == "catalog":
            logger.info("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ catalog –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è %s", enterprise_code)
            asyncio.run(send_catalog_data(out_path, enterprise_code))
        else:
            logger.info("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ stock –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è %s", enterprise_code)
            asyncio.run(send_stock_data(out_path, enterprise_code))

        logger.info("–î–∞–Ω–Ω—ã–µ %s —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –ë–î –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è %s", file_type, enterprise_code)

        # –æ—á–∏—Å—Ç–∫–∞: –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π –∏–∑ .json, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —É–¥–∞–ª—è–µ–º
        _delete_all_except(ftp, incoming_abs, latest_name)
        logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–æ—Å—Ç–∞–≤–ª–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª).")

        return True

    except Exception as e:
        logger.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: %s", e, exc_info=True)
        return False

    finally:
        try:
            if ftp:
                ftp.quit()
        except Exception:
            pass


# =========================
# –õ–û–ö–ê–õ–¨–ù–´–ô –ó–ê–ü–£–°–ö
# =========================
if __name__ == "__main__":
    import argparse

    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(levelname)s - %(message)s",
    )

    parser = argparse.ArgumentParser(description="FtpZoomagazin processor")
    parser.add_argument("--enterprise", type=int, required=True, help="enterprise_code")
    parser.add_argument("--type", choices=["catalog", "stock"], default=DEFAULT_FILE_TYPE, help="file type to process")
    args = parser.parse_args()

    ok = run_service(args.enterprise, args.type)
    raise SystemExit(0 if ok else 1)
