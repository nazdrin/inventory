import os
import json
import asyncio
import logging
from io import BytesIO
from datetime import datetime, timedelta
from ftplib import FTP, error_perm

from dotenv import load_dotenv
from sqlalchemy.future import select
from app.database import get_async_db
from app.models import MappingBranch
from app.services.database_service import process_database_service

# =========================
# –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã (–ø–æ –∑–∞–ø—Ä–æ—Å—É ‚Äî –Ω–µ –≤ .env)
# =========================
ENTERPRISE_CODE = "2"           # –∫–æ–¥ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ –≤–µ—Ç–∫–∏
FILE_TYPE = "both"              # 'catalog' | 'stock' | 'both'
DEFAULT_VAT = 20.0              # –ù–î–° –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞
KEEP_LATEST = 3                 # —Å–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤ –æ—Å—Ç–∞–≤–ª—è—Ç—å –≤–æ –≤—Ö–æ–¥—è—â–µ–π –ø–∞–ø–∫–µ
MAX_AGE_DAYS = 7                # —É–¥–∞–ª—è—Ç—å —Å—Ç–∞—Ä—à–µ N –¥–Ω–µ–π
TEMP_DIR = "./temp"             # –∫—É–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ JSON –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π

# =========================
# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ FTP ‚Äî –±–µ—Ä—ë–º –∏–∑ .env —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø –∏ –ø–∞–ø–∫–∏
# =========================
load_dotenv()

FTP_HOST = os.getenv("FTP_HOST", "127.0.0.1")
FTP_PORT = int(os.getenv("FTP_PORT", "21"))
FTP_USER = os.getenv("FTP_USER", "zoomagazin")
FTP_PASS = os.getenv("FTP_PASS", "")

# –í–ê–ñ–ù–û: FTP_DIR ‚Äî –∫–æ—Ä–µ–Ω—å –∫–ª–∏–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω local_root –Ω–∞ upload, —Ç–æ –∑–¥–µ—Å—å '/')
FTP_DIR = os.getenv("FTP_DIR", "/")
# –ü–æ–¥–ø–∞–ø–∫–∏ –≤–Ω—É—Ç—Ä–∏ –∫–æ—Ä–Ω—è (–±–µ–∑ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ '/')
FTP_ARCHIVE_DIR = os.getenv("FTP_ARCHIVE_DIR", "archive").lstrip("/")
FTP_FAILED_DIR = os.getenv("FTP_FAILED_DIR", "failed").lstrip("/")

logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(message)s")


# =========================
# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ø—É—Ç–µ–π –∏ FTP
# =========================
def _join_ftp(*parts: str) -> str:
    """–ê–∫–∫—É—Ä–∞—Ç–Ω–æ —Å–∫–ª–µ–∏–≤–∞–µ—Ç —á–∞—Å—Ç–∏ –ø—É—Ç–∏ –¥–ª—è FTP (–Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–ª—ç—à–∏)."""
    cleaned = [p.strip("/") for p in parts if p and p != "/"]
    return "/" + "/".join(cleaned) if cleaned else "/"

def _ensure_remote_dir(ftp: FTP, abs_path: str) -> None:
    """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–æ–∑–¥–∞—ë—Ç –∞–±—Å–æ–ª—é—Ç–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞ FTP, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç."""
    if not abs_path.startswith("/"):
        raise ValueError("–û–∂–∏–¥–∞–ª—Å—è –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å")
    segs = [s for s in abs_path.strip("/").split("/") if s]
    cur = "/"
    for s in segs:
        cur = _join_ftp(cur, s)
        try:
            ftp.mkd(cur)
        except error_perm as e:
            if not str(e).startswith("550"):
                raise

def _list_json_files_with_mtime(ftp, path):
    ftp.encoding = 'latin1'  # üí° –û–±—Ö–æ–¥ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
    try:
        names = ftp.nlst(path)
    except UnicodeDecodeError as e:
        logging.warning(f"‚ùóÔ∏è UnicodeDecodeError: {e}")
        names = ftp.nlst()  # –ë–µ–∑ –ø—É—Ç–∏ ‚Äî fallback
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {e}")
        return []

    # –ü—Ä–∏–º–∏—Ç–∏–≤–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è .json
    json_files = []
    for name in names:
        if name.lower().endswith(".json"):
            try:
                mdtm = ftp.sendcmd(f"MDTM {name}")
                dt_str = mdtm.replace("213 ", "")
                mtime = datetime.strptime(dt_str, "%Y%m%d%H%M%S")
                json_files.append((name, mtime))
            except Exception:
                continue

    return sorted(json_files, key=lambda x: x[1], reverse=True)


def _download_to_string(ftp, path, filename):
    from io import BytesIO
    buf = BytesIO()

    # –°–∫–∞—á–∏–≤–∞–µ–º –±–∏–Ω–∞—Ä–Ω–æ
    ftp.retrbinary(f"RETR {filename}", buf.write)
    buf.seek(0)

    # –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–∞–∫ Windows-1251 (—á–∞—â–µ –≤—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ç–∞–∫–∏—Ö —Å–ª—É—á–∞—è—Ö)
    try:
        return buf.read().decode("utf-8")
    except UnicodeDecodeError:
        return buf.read().decode("windows-1251")  # –ò–ª–∏ "latin1" ‚Äî –º–æ–∂–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å


def _move_into(ftp: FTP, src_dir_abs: str, filename: str, dst_dir_abs: str) -> str:
    """–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ñ–∞–π–ª –∏–∑ src_dir –≤ dst_dir, –¥–æ–±–∞–≤–∏—Ç—å timestamp –∫ –∏–º–µ–Ω–∏."""
    _ensure_remote_dir(ftp, dst_dir_abs)
    ts = datetime.now().strftime("%Y%m%d-%H%M%S")
    base, ext = os.path.splitext(filename)
    dst_name = f"{base}__{ts}{ext}"
    ftp.rename(_join_ftp(src_dir_abs, filename), _join_ftp(dst_dir_abs, dst_name))
    return _join_ftp(dst_dir_abs, dst_name)

def _cleanup_incoming(ftp: FTP, cwd_abs: str, keep_latest: int, max_age_days: int):
    now = datetime.now()
    files = _list_json_files_with_mtime(ftp, cwd_abs)
    if not files:
        return
    files.sort(key=lambda x: x[1], reverse=True)
    latest = set(name for name, _ in files[:max(0, keep_latest)])
    for name, mt in files:
        if name in latest:
            continue
        if (now - mt).days >= max_age_days:
            try:
                ftp.delete(_join_ftp(cwd_abs, name))
                logging.info(f"üßπ –£–¥–∞–ª—ë–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: {name}")
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {name}: {e}")


# =========================
# –î–æ—Å—Ç—É–ø –∫ –ë–î
# =========================
async def fetch_branch_by_enterprise_code(enterprise_code: str) -> str:
    async with get_async_db() as session:
        result = await session.execute(
            select(MappingBranch.branch).where(MappingBranch.enterprise_code == enterprise_code)
        )
        branch = result.scalars().first()
        if not branch:
            raise ValueError(f"Branch –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è enterprise_code={enterprise_code}")
        return str(branch)


# =========================
# –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
# =========================
def _normalize_input(json_str: str) -> list[dict]:
    data = json.loads(json_str)
    if isinstance(data, dict):
        return [data]
    if isinstance(data, list):
        return data
    raise ValueError("–û–∂–∏–¥–∞–ª—Å—è JSON-–æ–±—ä–µ–∫—Ç –∏–ª–∏ –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤")

def transform_catalog(items: list[dict]) -> list[dict]:
    return [{
        "code": str(it.get("Id", "")),
        "name": str(it.get("Name", "") or ""),
        "producer": "",
        "barcode": str(it.get("Barcode", "") or ""),
        "vat": DEFAULT_VAT,
    } for it in items]

def transform_stock(items: list[dict], branch: str) -> list[dict]:
    out = []
    for it in items:
        price = max(float(it.get("MaxPrice", 0.0) or 0.0), 0.0)
        qty = max(float(it.get("TotalStock", 0.0) or 0.0), 0.0)
        out.append({
            "branch": branch,
            "code": str(it.get("Id", "")),
            "price": price,
            "qty": qty,
            "price_reserve": price
        })
    return out

def save_to_json(data, enterprise_code: str, file_type: str) -> str:
    out_dir = os.path.join(TEMP_DIR, str(enterprise_code))
    os.makedirs(out_dir, exist_ok=True)
    path = os.path.join(out_dir, f"{file_type}.json")
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)
    logging.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {path}")
    return path

async def send_catalog_data(path: str, enterprise_code: str):
    await process_database_service(path, "catalog", enterprise_code)

async def send_stock_data(path: str, enterprise_code: str):
    await process_database_service(path, "stock", enterprise_code)


# =========================
# –û—Å–Ω–æ–≤–Ω–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π
# =========================
async def run_service(enterprise_code: str, file_type: str):
    # –ê–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏ –Ω–∞ FTP
    incoming_abs = FTP_DIR if FTP_DIR.startswith("/") else _join_ftp("/", FTP_DIR)
    archive_abs = _join_ftp(incoming_abs, FTP_ARCHIVE_DIR) if not FTP_ARCHIVE_DIR.startswith("/") else FTP_ARCHIVE_DIR
    failed_abs = _join_ftp(incoming_abs, FTP_FAILED_DIR) if not FTP_FAILED_DIR.startswith("/") else FTP_FAILED_DIR

    ftp = FTP()
    ftp.connect(FTP_HOST, FTP_PORT, timeout=30)
    ftp.login(FTP_USER, FTP_PASS)
    ftp.encoding = "utf-8"

    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∏ –µ—Å—Ç—å
    for d in (incoming_abs, archive_abs, failed_abs):
        _ensure_remote_dir(ftp, d)

    latest_name = None
    try:
        files = _list_json_files_with_mtime(ftp, incoming_abs)
        if not files:
            logging.info("–ù–µ—Ç JSON-—Ñ–∞–π–ª–æ–≤ –≤–æ –≤—Ö–æ–¥—è—â–µ–π –ø–∞–ø–∫–µ.")
            return

        files.sort(key=lambda x: x[1], reverse=True)
        latest_name, latest_mtime = files[0]
        logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {latest_name} (mtime={latest_mtime})")

        raw = _download_to_string(ftp, incoming_abs, latest_name)
        items = _normalize_input(raw)

        ft = (file_type or "both").lower()
        if ft not in ("catalog", "stock", "both"):
            raise ValueError("file_type –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'catalog', 'stock' –∏–ª–∏ 'both'")

        if ft in ("catalog", "both"):
            catalog = transform_catalog(items)
            cat_path = save_to_json(catalog, enterprise_code, "catalog")
            await send_catalog_data(cat_path, enterprise_code)

        if ft in ("stock", "both"):
            branch = await fetch_branch_by_enterprise_code(enterprise_code)
            stock = transform_stock(items, branch)
            st_path = save_to_json(stock, enterprise_code, "stock")
            await send_stock_data(st_path, enterprise_code)

        moved = _move_into(ftp, incoming_abs, latest_name, archive_abs)
        logging.info(f"üì¶ –ü–µ—Ä–µ–º–µ—â—ë–Ω –≤ –∞—Ä—Ö–∏–≤: {moved}")

        _cleanup_incoming(ftp, incoming_abs, KEEP_LATEST, MAX_AGE_DAYS)

    except Exception as e:
        logging.exception(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        try:
            if latest_name:
                failed = _move_into(ftp, incoming_abs, latest_name, failed_abs)
                logging.warning(f"–§–∞–π–ª –ø–µ—Ä–µ–º–µ—â—ë–Ω –≤ failed: {failed}")
        except Exception as e2:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤ failed: {e2}")
    finally:
        try:
            ftp.quit()
        except Exception:
            pass


# –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫
if __name__ == "__main__":
    asyncio.run(run_service(ENTERPRISE_CODE, FILE_TYPE))