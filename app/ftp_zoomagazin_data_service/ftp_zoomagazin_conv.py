import os
import ftplib
import json
import logging
from io import BytesIO
from typing import Optional
from app.services.database_service import process_database_service


# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
FTP_HOST = os.getenv("FTP_HOST", "localhost")
FTP_PORT = int(os.getenv("FTP_PORT", 21))
FTP_USER = os.getenv("FTP_USER", "")
FTP_PASS = os.getenv("FTP_PASS", "")
FTP_DIR = os.getenv("FTP_DIR", "/")
TEMP_FILE_PATH = os.getenv("TEMP_FILE_PATH", "/root/temp")

DEFAULT_FILE_TYPE = "catalog"


# --- –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–≥–æ–≤ ---
def _decode_filename(name: str) -> str:
    try:
        return name.encode("latin1").decode("utf-8")
    except UnicodeDecodeError:
        try:
            return name.encode("latin1").decode("cp1251")
        except UnicodeDecodeError:
            return name


# --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ FTP ---
def _connect_ftp() -> ftplib.FTP:
    ftp = ftplib.FTP()
    ftp.connect(FTP_HOST, FTP_PORT)
    ftp.login(FTP_USER, FTP_PASS)
    ftp.encoding = "latin1"  # –ö–ª—é—á–µ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
    return ftp


# --- –ü–æ–∏—Å–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–∞–π–ª–∞ ---
def _get_latest_file_name(ftp: ftplib.FTP, directory: str) -> Optional[str]:
    files = ftp.nlst(directory)
    json_files = []

    for f in files:
        if not f.lower().endswith(".json"):
            continue

        try:
            resp = ftp.sendcmd(f"MDTM {f}")
            mtime = resp[4:].strip()
            decoded_name = _decode_filename(f)
            json_files.append((f, decoded_name, mtime))  # –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è
        except Exception:
            continue

    if not json_files:
        return None

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ
    latest = max(json_files, key=lambda x: x[2])
    ftp_name, decoded_name, _ = latest

    logging.info(f"üìÑ –ù–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª: {decoded_name}")
    return ftp_name  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ FTP-–∏–º—è
        

# --- –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —Å FTP –∏ –ø–æ–ø—ã—Ç–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å ---
def _download_to_string(ftp: ftplib.FTP, directory: str, filename: str) -> str:
    buf = BytesIO()
    ftp.retrbinary(f"RETR {filename}", buf.write)
    buf.seek(0)

    raw_bytes = buf.read()
    try:
        return raw_bytes.decode("utf-8")
    except UnicodeDecodeError:
        try:
            return raw_bytes.decode("cp1251")
        except UnicodeDecodeError as e:
            raise Exception(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞: {e}")


# --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª ---
def _save_temp_json(content: str, enterprise_code: str, file_type: str = DEFAULT_FILE_TYPE) -> str:
    os.makedirs(TEMP_FILE_PATH, exist_ok=True)
    file_path = os.path.join(TEMP_FILE_PATH, f"{file_type}-{enterprise_code}.json")

    with open(file_path, "w", encoding="utf-8") as f:
        f.write(content)

    logging.info(f"‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {file_path}")
    return file_path


async def run_service(enterprise_code: str, file_type: str = DEFAULT_FILE_TYPE) -> None:
    logging.info(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è enterprise_code={enterprise_code}, type={file_type}")
    ftp = _connect_ftp()

    try:
        latest_name = _get_latest_file_name(ftp, FTP_DIR)
        if not latest_name:
            raise FileNotFoundError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –æ–¥–∏–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–∞–π–ª .json")

        log_name = _decode_filename(latest_name)
        logging.info(f"üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞: {log_name}")

        # 1. –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        raw_content = _download_to_string(ftp, FTP_DIR, latest_name)
        data_json = json.loads(raw_content)

        # 2. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ü–µ–ª–µ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç
        if file_type == "catalog":
            from app.services.data_converter import transform_catalog
            transformed = transform_catalog(data_json)

        elif file_type == "stock":
            from app.services.data_converter import transform_stock
            from app.services.database_service import fetch_branch_by_enterprise_code
            branch = await fetch_branch_by_enterprise_code(enterprise_code)
            transformed = transform_stock(data_json, branch)

        else:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞ (–æ–∂–∏–¥–∞–µ—Ç—Å—è 'catalog' –∏–ª–∏ 'stock')")

        # 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–∂–µ –ü–†–ï–û–ë–†–ê–ó–û–í–ê–ù–ù–´–ï –¥–∞–Ω–Ω—ã–µ
        temp_path = _save_temp_json(
            json.dumps(transformed, ensure_ascii=False, indent=4),
            enterprise_code,
            file_type
        )

        # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ë–î
        await process_database_service(temp_path, file_type, enterprise_code)

    except Exception as e:
        logging.error(f"üî• –û—à–∏–±–∫–∞: {e}")
    finally:
        ftp.quit()
        logging.info("üîí FTP-—Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")



# --- –ó–∞–ø—É—Å–∫ –≤—Ä—É—á–Ω—É—é ---
if __name__ == "__main__":
    import asyncio
    logging.basicConfig(level=logging.INFO)
    asyncio.run(run_service("342", "catalog"))
