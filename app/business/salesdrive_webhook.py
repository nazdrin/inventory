# app/services/salesdrive_webhook.py
from __future__ import annotations

import logging
from typing import Any, Dict, List, Optional

from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ (–∫–∞–∫ –ø—Ä–æ—Å–∏–ª)
from app.database import get_async_db, EnterpriseSettings
from app.models import MappingBranch
from app.services.order_sender import send_orders_to_tabletki
# –∏–º—è —Ñ–∞–π–ª–∞ –ø—Ä–∏—ë–º–∞ TTN —É—Ç–æ—á–Ω–∏: —Ç—É—Ç –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—é app/services/send_TTN.py
from app.services.send_TTN import send_ttn  # async def send_ttn(session, id, enterprise_code, ttn, deliveryServiceAlias, phoneNumber)

logger = logging.getLogger("salesdrive")
logger.setLevel(logging.INFO)

# 1) –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
STATUS_MAP = {2: 4, 3: 4, 4: 4, 5: 6, 6: 7}
CANCEL_REASON = {24: 1, "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—è –∫—ñ–ª—å–∫—ñ—Å—Ç—å": 5}
DELIVERY_MAP = {"novaposhta": "NP", "ukrposhta": "UP"}  # –±–µ–∑ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤, –∫–ª—é—á–∏ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ

async def _get_enterprise_code_by_branch(session: AsyncSession, branch_value: Any) -> Optional[str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç enterprise_code –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é 'branch' (sajt –∏–∑ –≤–µ–±—Ö—É–∫–∞)."""
    if branch_value is None:
        return None
    branch_str = str(branch_value)
    q = select(MappingBranch.enterprise_code).where(MappingBranch.branch == branch_str)
    res = await session.execute(q)
    return res.scalar_one_or_none()

async def _get_tabletki_credentials(session: AsyncSession, enterprise_code: str) -> Optional[tuple[str, str]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (login, password) –∏–∑ EnterpriseSettings –ø–æ enterprise_code."""
    q = select(
        EnterpriseSettings.tabletki_login,
        EnterpriseSettings.tabletki_password
    ).where(EnterpriseSettings.enterprise_code == enterprise_code)
    row = (await session.execute(q)).first()
    if not row:
        return None
    return row[0], row[1]

def _build_order_rows(products: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
    """–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç products –∏–∑ –≤–µ–±—Ö—É–∫–∞ –≤ rows –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏."""
    rows: List[Dict[str, Any]] = []
    for p in products or []:
        rows.append({
            "goodsCode": str(p.get("productId") or ""),     # productId -> goodsCode
            "goodsName": p.get("name") or "",               # name -> goodsName
            "goodsProducer": "",                            # –ø—É—Å—Ç–æ, –∫–∞–∫ –ø—Ä–æ—Å–∏–ª
            "qtyShip": p.get("amount") or 0,                # amount -> qtyShip
            "priceShip": p.get("price") or 0,               # price -> priceShip
        })
    return rows

def _extract_ttn_block(data: Dict[str, Any]) -> tuple[Optional[str], Optional[str]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (trackingNumber, provider) –∏–∑ data. –ë–µ—Ä—ë–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å —Å TTN –∏–∑ ord_delivery_data[].
    """
    for item in (data.get("ord_delivery_data") or []):
        ttn = item.get("trackingNumber")
        if ttn:
            return str(ttn), str(item.get("provider") or "")
    return None, None

def _extract_phone(data: Dict[str, Any]) -> Optional[str]:
    """–ü—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å phone –∏–∑ contacts[0].phone."""
    contacts = data.get("contacts") or []
    if contacts and isinstance(contacts, list):
        return contacts[0].get("phone")
    return None

async def process_salesdrive_webhook(payload: Dict[str, Any]) -> None:
    data = (payload.get("data") or {})
    status_in: Optional[int] = data.get("statusId")
    mapped_status: int = STATUS_MAP.get(status_in, status_in)

    external_id = str(data.get("externalId") or "")
    utm_source = data.get("utmSource")  # ‚úÖ —Ç–µ–ø–µ—Ä—å –±–µ—Ä—ë–º branch –∏–∑ utmSource
    products = data.get("products") or []

    order_obj = {
        "id": external_id,
        "statusID": mapped_status,
        "branchID": str(utm_source) if utm_source is not None else "",  # ‚úÖ –∑–∞–º–µ–Ω–∏–ª–∏ sajt ‚Üí utmSource
        "rows": _build_order_rows(products),
    }
    orders: List[Dict[str, Any]] = [order_obj]

    async with get_async_db() as session:
        # ‚úÖ enterprise_code –∏—â–µ–º –ø–æ utmSource
        enterprise_code = await _get_enterprise_code_by_branch(session, utm_source)
        if not enterprise_code:
            logger.error("‚õî enterprise_code –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ utmSource=%s –≤ MappingBranch", utm_source)
            return

        creds = await _get_tabletki_credentials(session, enterprise_code)
        if not creds:
            logger.error("‚õî tabletki_login/password –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è enterprise_code=%s", enterprise_code)
            return
        tabletki_login, tabletki_password = creds

        if status_in in (2, 3, 4):
            try:
                await send_orders_to_tabletki(
                    session=session,
                    orders=orders,
                    tabletki_login=tabletki_login,
                    tabletki_password=tabletki_password,
                    cancel_reason=1
                )
                logger.info("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–π –∑–∞–∫–∞–∑: id=%s, status_in=%s ‚Üí statusID=%s, enterprise=%s",
                            external_id, status_in, mapped_status, enterprise_code)
            except Exception as e:
                logger.exception("‚ùå –û—à–∏–±–∫–∞ send_orders_to_tabletki –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: %s", e)

        elif status_in == 6:
            raw_reason = data.get("rejectionReason")
            if isinstance(raw_reason, str):
                cancel_reason = CANCEL_REASON.get(raw_reason, 1)
            else:
                cancel_reason = 1
                logger.warning("‚ö†Ô∏è rejectionReason=%r –Ω–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª—ë–Ω —Å–æ —Å–ª–æ–≤–∞—Ä—ë–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º cancel_reason=1", raw_reason)

            try:
                await send_orders_to_tabletki(
                    session=session,
                    orders=orders,
                    tabletki_login=tabletki_login,
                    tabletki_password=tabletki_password,
                    cancel_reason=cancel_reason
                )
                logger.info("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–∫–∞–∑: id=%s, status_in=6 ‚Üí statusID=%s, reason=%s, enterprise=%s",
                            external_id, mapped_status, cancel_reason, enterprise_code)
            except Exception as e:
                logger.exception("‚ùå –û—à–∏–±–∫–∞ send_orders_to_tabletki –¥–ª—è –æ—Ç–∫–∞–∑–∞: %s", e)

        # TTN-–±–ª–æ–∫ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        ttn, provider = _extract_ttn_block(data)
        if ttn:
            alias = DELIVERY_MAP.get((provider or "").lower())
            if not alias:
                logger.warning("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π provider=%r, –Ω–µ –º–æ–∂–µ–º –º–∞–ø–ø–∏—Ç—å deliveryServiceAlias", provider)
            else:
                phone = _extract_phone(data)
                try:
                    await send_ttn(
                        session=session,
                        id=external_id,
                        enterprise_code=enterprise_code,
                        ttn=ttn,
                        deliveryServiceAlias=alias,
                        phoneNumber=phone or ""
                    )
                    logger.info("üì¶ TTN –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: id=%s, ttn=%s, alias=%s, phone=%s", external_id, ttn, alias, phone)
                except Exception as e:
                    logger.exception("‚ùå –û—à–∏–±–∫–∞ send_ttn: %s", e)
        else:
            logger.debug("TTN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ ord_delivery_data ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ç—Ä–µ–∫–∞.")