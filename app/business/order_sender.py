# app/business/order_sender.py
from __future__ import annotations

import asyncio
import logging
from dataclasses import dataclass
from decimal import Decimal
from typing import Any, Dict, List, Optional, Tuple, Iterable
import json
from sqlalchemy import select, and_, or_, func, literal
from sqlalchemy.exc import NoResultFound
from sqlalchemy.ext.asyncio import AsyncSession

# === –í–∞—à–∏ –º–æ–¥–µ–ª–∏ (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞/–ø–æ–ª—è) ===
from app.database import get_async_db
from app.models import Offer, DropshipEnterprise, CatalogMapping, EnterpriseSettings
import httpx

logger = logging.getLogger(__name__)


# ---------------------------
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –°–¢–†–£–ö–¢–£–†–´
# ---------------------------

@dataclass
class OrderRow:
    goodsCode: str
    goodsName: str
    qty: Decimal
    price: Decimal
    goodsProducer: Optional[str] = None


@dataclass
class SupplierPick:
    supplier_code: str
    supplier_name: str
    sku: Optional[str]
    price: Decimal
async def _send_to_salesdrive(payload: Dict[str, Any], api_key: str) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ –≤ SalesDrive –ø–æ API, —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º X-Api-Key.
    """
    url = "https://petrenko.salesdrive.me/handler/"  # ‚Üê –∏–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à endpoint

    headers = {
        "accept": "application/json",
        "Content-Type": "application/json",
        "X-Api-Key": api_key,
    }

    async with httpx.AsyncClient(timeout=15) as client:
        try:
            logger.info("üì¶ Payload –¥–ª—è SalesDrive:\n%s", json.dumps(payload, indent=2, ensure_ascii=False))
            response = await client.post(url, json=payload, headers=headers)
            logger.info("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ SalesDrive. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: %s", response.status_code)
            logger.info("üì® –û—Ç–≤–µ—Ç –æ—Ç SalesDrive: %s", response.text)
            response.raise_for_status()
        except httpx.RequestError as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SalesDrive: %s", str(e))
        except httpx.HTTPStatusError as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ HTTP –æ—Ç SalesDrive: %s ‚Äî %s", e.response.status_code, e.response.text)

def _as_decimal(x: Any) -> Decimal:
    if isinstance(x, Decimal):
        return x
    try:
        return Decimal(str(x))
    except Exception:
        return Decimal(0)


def _normalize_order_rows(order: Dict[str, Any]) -> List[OrderRow]:
    rows = []
    for r in order.get("rows", []):
        rows.append(
            OrderRow(
                goodsCode=str(r.get("goodsCode")),
                goodsName=str(r.get("goodsName", "")),
                qty=_as_decimal(r.get("qty", 0)),
                price=_as_decimal(r.get("price", 0)),
                goodsProducer=r.get("goodsProducer"),
            )
        )
    return rows


def _delivery_dict(order: Dict[str, Any]) -> Dict[str, str]:
    """
    –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º –º–∞—Å—Å–∏–≤ deliveryData [{key, value, description}] –≤ –ø—Ä–æ—Å—Ç–æ–π dict –ø–æ key ‚Üí value.
    """
    out = {}
    for item in order.get("deliveryData", []) or []:
        k = item.get("key")
        v = item.get("value")
        if k:
            out[k] = v
    return out


async def _get_salesdrive_api_key(session: AsyncSession, enterprise_code: str) -> Optional[str]:
    q = (
        select(EnterpriseSettings.token)
        .where(EnterpriseSettings.enterprise_code == str(enterprise_code))
        .limit(1)
    )
    res = await session.execute(q)
    return res.scalar_one_or_none()


async def _fetch_supplier_by_price(
    session: AsyncSession, product_code: str, price: Decimal
) -> Optional[str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç supplier_code –∏–∑ offers, –µ—Å–ª–∏ –Ω–∞—à–ª–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ product_code –∏ price.
    –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ–±–∞–≤—å—Ç–µ –¥–æ–ø. —Ñ–∏–ª—å—Ç—Ä—ã (–≥–æ—Ä–æ–¥/branch/enterprise_code).
    """
    q = (
        select(Offer.supplier_code)
        .where(
            and_(
                Offer.product_code == str(product_code),
                Offer.price == price,  # —Ç–æ—á–Ω–æ–µ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–∫—Ä—É–≥–ª—è—Ç—å.
            )
        )
        .limit(1)
    )
    res = await session.execute(q)
    return res.scalar_one_or_none()


async def _fetch_supplier_name(session: AsyncSession, supplier_code: str) -> Optional[str]:
    q = (
        select(DropshipEnterprise.name)
        .where(DropshipEnterprise.code == str(supplier_code))
        .limit(1)
    )
    res = await session.execute(q)
    return res.scalar_one_or_none()


async def _fetch_supplier_price(
    session: AsyncSession, supplier_code: str, product_code: str
) -> Optional[Decimal]:
    """
    –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ —É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ (–∏–∑ offers).
    """
    q = (
        select(Offer.price)
        .where(
            and_(
                Offer.supplier_code == str(supplier_code),
                Offer.product_code == str(product_code),
            )
        )
        .limit(1)
    )
    res = await session.execute(q)
    return res.scalar_one_or_none()


async def _fetch_sku_from_catalog_mapping(
    session: AsyncSession, goods_code: str, supplier_code: str
) -> Optional[str]:
    """
    –ë–µ—Ä–µ–º SKU –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏–∑ CatalogMapping: –ø–æ–ª–µ Code_{supplier_code}, –Ω–∞–ø—Ä–∏–º–µ—Ä Code_D1.
    """
    field_name = f"Code_{supplier_code}"
    code_col = getattr(CatalogMapping, field_name, None)
    if code_col is None:
        return None

    q = (
        select(code_col)
        .where(CatalogMapping.ID == str(goods_code))
        .limit(1)
    )
    res = await session.execute(q)
    return res.scalar_one_or_none()


def _build_novaposhta_block(d: Dict[str, str]) -> Dict[str, Any]:
    """
    –ù–∞–ø–æ–ª–Ω—è–µ–º –±–ª–æ–∫ –ù–ü, –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–∏.
    –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ value –∏–∑ –≤—Ö–æ–¥–∞.
    """
    if d.get("DeliveryServiceAlias") != "NP":
        return {}
    return {
        "ServiceType": d.get("ServiceType", "Warehouse"),
        "payer": d.get("payer", "recipient"),
        "area": d.get("area", ""),
        "region": d.get("region", ""),
        "city": d.get("CitySender", ""),         # –∏–∑ –≤—Ö–æ–¥–∞
        "cityNameFormat": d.get("cityNameFormat", ""),
        "WarehouseNumber": d.get("ID_Whs", ""),  # –∏–∑ –≤—Ö–æ–¥–∞
        "Street": d.get("Street", ""),
        "BuildingNumber": d.get("BuildingNumber", ""),
        "Flat": d.get("Flat", ""),
        "ttn": d.get("ttn", ""),
    }


def _build_ukrposhta_block(d: Dict[str, str]) -> Dict[str, Any]:
    if d.get("DeliveryServiceAlias") != "UP":
        return {}
    return {
        "ServiceType": d.get("ServiceType", ""),
        "payer": d.get("payer", ""),
        "type": d.get("type", ""),
        "city": d.get("CitySender", ""),
        "WarehouseNumber": d.get("ID_Whs", ""),
        "Street": d.get("Street", ""),
        "BuildingNumber": d.get("BuildingNumber", ""),
        "Flat": d.get("Flat", ""),
        "ttn": d.get("ttn", ""),
    }


def _build_meest_block(d: Dict[str, str]) -> Dict[str, Any]:
    if d.get("DeliveryServiceAlias") != "MEEST":
        return {}
    return {
        "ServiceType": d.get("ServiceType", ""),
        "payer": d.get("payer", ""),
        "area": d.get("area", ""),
        "city": d.get("CitySender", ""),
        "WarehouseNumber": d.get("ID_Whs", ""),
        "ttn": d.get("ttn", ""),
    }


def _build_rozetka_block(d: Dict[str, str]) -> Dict[str, Any]:
    if d.get("DeliveryServiceAlias") != "ROZ":
        return {}
    return {
        "WarehouseNumber": d.get("ID_Whs", ""),
        "payer": d.get("payer", ""),
        "ttn": d.get("ttn", ""),
    }


# async def _send_to_salesdrive_stub(payload: Dict[str, Any]) -> None:
#     """
#     –ó–∞–≥–ª—É—à–∫–∞: –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ ‚Äî –ø–æ–¥—Ä–æ–±–Ω—ã–π –ª–æ–≥.
#     """
#     import json
#     logger.info("üß™ [SALES DRIVE STUB] Payload:\n%s", json.dumps(payload, indent=2, ensure_ascii=False))


async def _initiate_refusal_stub(order: Dict[str, Any], reason: str) -> None:
    logger.warning("üö´ –ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –æ—Ç–∫–∞–∑ –ø–æ –∑–∞–∫–∞–∑—É %s: %s", order.get("id"), reason)


# ------------------------------------------------
# –õ–û–ì–ò–ö–ê –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ü–û–°–¢–ê–í–©–ò–ö–ê –î–õ–Ø MULTI-ITEM
# ------------------------------------------------

async def _try_pick_single_supplier_by_exact_prices(
    session: AsyncSession, rows: List[OrderRow]
) -> Optional[str]:
    """
    –ï—Å–ª–∏ –∫–∞–∂–¥–∞—è –ø–æ–∑–∏—Ü–∏—è –∏–º–µ–µ—Ç —Ç–æ—á–Ω–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –ø–æ –ø—Ä–∞–≤–∏–ª—É (price == offers.price –¥–ª—è product_code),
    –∏ –≤—Å–µ —ç—Ç–∏ supplier_code –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ.
    """
    picked: List[str] = []
    for r in rows:
        sc = await _fetch_supplier_by_price(session, r.goodsCode, r.price)
        if not sc:
            return None
        picked.append(sc)
    if len(set(picked)) == 1:
        return picked[0]
    return None


async def _try_pick_alternative_supplier_by_total_cap(
    session: AsyncSession, rows: List[OrderRow], candidates: Iterable[str]
) -> Optional[str]:
    """
    –ò—â–µ–º —Ç–∞–∫–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ s –∏–∑ —Å–ø–∏—Å–∫–∞ candidates, —á—Ç–æ–±—ã —Å—É–º–º–∞ –µ–≥–æ —Ü–µ–Ω –ø–æ –≤—Å–µ–º —Ç–æ–≤–∞—Ä–∞–º
    –±—ã–ª–∞ <= —Å—É–º–º–µ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ü–µ–Ω –ø–æ –∑–∞–∫–∞–∑—É. –í–æ–∑–≤—Ä–∞—â–∞–µ–º supplier_code.
    """
    total_incoming = sum((r.price * r.qty for r in rows), Decimal(0))

    for supplier_code in candidates:
        ok = True
        total_alt = Decimal(0)
        for r in rows:
            price_s = await _fetch_supplier_price(session, supplier_code, r.goodsCode)
            if price_s is None:
                ok = False
                break
            total_alt += price_s * r.qty
        if ok and total_alt <= total_incoming:
            return supplier_code

    return None


async def _collect_all_supplier_candidates(session: AsyncSession) -> List[str]:
    """
    –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–¥–æ–≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏–∑ DropshipEnterprise (–∏–ª–∏ –æ–≥—Ä–∞–Ω–∏—á—å—Ç–µ –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º).
    """
    q = select(DropshipEnterprise.code)
    res = await session.execute(q)
    rows = res.scalars().all()
    return [str(x) for x in rows]


# -------------------------------
# –°–ë–û–†–ö–ê PAYLOAD –î–õ–Ø SALESDRIVE
# -------------------------------

async def _build_products_block(
    session: AsyncSession,
    rows: List[OrderRow],
    supplier_code: str,
    supplier_name: str,
    supplier_changed_note: Optional[str] = None
) -> List[Dict[str, Any]]:
    products = []
    for r in rows:
        sku = await _fetch_sku_from_catalog_mapping(session, r.goodsCode, supplier_code)
        description = supplier_name
        if supplier_changed_note:
            # —Ä–∞—Å—à–∏—Ä—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
            description = f"{supplier_name}. {supplier_changed_note}"

        products.append(
            {
                "id": r.goodsCode,
                "name": r.goodsName,
                "costPerItem": str(r.price),  # –∏—Å—Ö. —Ü–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏–∏
                "amount": str(r.qty),
                "description": "",
                "discount": "",
                "sku": sku or "",
            }
        )
    return products


def _make_supplier_changed_note(rows: List[OrderRow]) -> str:
    parts = [f"{r.goodsName} ‚Äî {str(r.price)}" for r in rows]
    return "–ü–æ—Å—Ç–∞–≤—â–∏–∫ –∏–∑–º–µ–Ω—ë–Ω. –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∏ —Ü–µ–Ω—ã: " + "; ".join(parts)


def _extract_name_parts(order: Dict[str, Any], d: Dict[str, str]) -> Tuple[str, str, str]:
    # fName: Name, lName: LastName, mName: MiddleName
    f = d.get("Name") or order.get("customer") or ""
    l = d.get("LastName") or ""
    m = d.get("MiddleName") or ""
    return f, l, m


async def build_salesdrive_payload(
    session: AsyncSession,
    order: Dict[str, Any],
    enterprise_code: str,
    rows: List[OrderRow],
    supplier_code: str,
    supplier_name: str,
) -> Dict[str, Any]:
    d = _delivery_dict(order)
    fName, lName, mName = _extract_name_parts(order, d)

    # –µ—Å–ª–∏ –±—ã–ª –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ ‚Äî –¥–æ–±–∞–≤–∏–º –ø–æ–º–µ—Ç–∫—É
    supplier_changed_note = None
    if order.get("_supplier_changed"):
        supplier_changed_note = _make_supplier_changed_note(rows)

    products = await _build_products_block(
        session, rows, supplier_code, supplier_name, supplier_changed_note
    )

    #form_key = await _get_enterprise_salesdrive_form(session, enterprise_code)

    payload = {
        
        "getResultData": "1",
        "fName": fName,
        "lName": lName,
        "mName": mName,
        "phone": order.get("customerPhone", ""),
        "email": "",
        "company": "",
        "products": products,
        "payment_method": "",
        "shipping_method": d.get("DeliveryServiceName", ""),
        "shipping_address": d.get("ReceiverWhs", ""),
        "comment": supplier_changed_note or supplier_name,
        "sajt": "",
        "externalId": order.get("id", ""),
        "organizationId": "1",
        "stockId": "",
        "novaposhta": _build_novaposhta_block(d),
        "ukrposhta": _build_ukrposhta_block(d),
        "meest": _build_meest_block(d),
        "rozetka_delivery": _build_rozetka_block(d),
        "prodex24source_full": "",
        "prodex24source": "",
        "prodex24medium": "",
        "prodex24campaign": "",
        "prodex24content": "",
        "prodex24term": "",
        "prodex24page": "",
    }
    return payload


# -----------------------------------------
# –ì–õ–ê–í–ù–ê–Ø –¢–û–ß–ö–ê: –ü–†–û–¶–ï–°–°–û–† –û–¢–ü–†–ê–í–ö–ò –ó–ê–ö–ê–ó–ê
# -----------------------------------------

async def process_and_send_order(
    order: Dict[str, Any],
    enterprise_code: str,
    branch: Optional[str] = None,
) -> None:
    rows = _normalize_order_rows(order)
    if not rows:
        await _initiate_refusal_stub(order, "–ü—É—Å—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞")
        return

    async with get_async_db() as session:
        api_key = await _get_salesdrive_api_key(session, enterprise_code)
        if not api_key:
            await _initiate_refusal_stub(order, "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç API‚Äë–∫–ª—é—á –¥–ª—è SalesDrive")
            return

        if len(rows) == 1:
            r = rows[0]
            supplier_code = await _fetch_supplier_by_price(session, r.goodsCode, r.price)
            if not supplier_code:
                await _initiate_refusal_stub(order, "–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å—Ç–∞–≤—â–∏–∫ –ø–æ —Ü–µ–Ω–µ")
                return

            supplier_name = (await _fetch_supplier_name(session, supplier_code)) or supplier_code
            payload = await build_salesdrive_payload(session, order, enterprise_code, rows, supplier_code, supplier_name)
            await _send_to_salesdrive(payload, api_key)
            return

        supplier_code = await _try_pick_single_supplier_by_exact_prices(session, rows)
        if not supplier_code:
            candidates = await _collect_all_supplier_candidates(session)
            alt = await _try_pick_alternative_supplier_by_total_cap(session, rows, candidates)
            if alt:
                supplier_code = alt
                order["_supplier_changed"] = True
            else:
                await _initiate_refusal_stub(order, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –ø–æ —Å—É–º–º–µ –∑–∞–∫–∞–∑–∞")
                return

        supplier_name = (await _fetch_supplier_name(session, supplier_code)) or supplier_code
        payload = await build_salesdrive_payload(session, order, enterprise_code, rows, supplier_code, supplier_name)
        await _send_to_salesdrive(payload, api_key)


# -----------------------------------------
# REGISTRY –¥–ª—è –≤–∞—à–µ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞/–¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
# -----------------------------------------

# –ü—Ä–∏–º–µ—Ä: —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –≤ –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ
ORDER_SEND_PROCESSORS = {
    # data_format ‚Üí —Ñ—É–Ω–∫—Ü–∏—è
    # –ü—Ä–∏–º–µ—Ä: "GoogleDrive": process_and_send_order,
    #         "JetVet": process_and_send_order,
    # –£ –≤–∞—Å –≤ –≤—ã–∑—ã–≤–∞—é—â–µ–º –∫–æ–¥–µ –¥–æ–ª–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å—Å—è: await processor(order, enterprise_code, branch)
    "DEFAULT": process_and_send_order
}

# –ü—Ä–∏–º–µ—Ä –≤—ã–∑–æ–≤–∞ (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞):
# asyncio.run(process_and_send_order(sample_order, "342"))