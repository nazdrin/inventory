from fastapi import APIRouter, HTTPException, Depends,UploadFile, Request
from sqlalchemy.ext.asyncio import AsyncSession
from app import crud, schemas, database
from app.schemas import EnterpriseSettingsSchema
from app.schemas import DeveloperSettingsSchema
from app.schemas import DataFormatSchema
from app.schemas import MappingBranchSchema
from fastapi.encoders import jsonable_encoder
from app.database import DeveloperSettings, EnterpriseSettings, DataFormat, MappingBranch, AsyncSessionLocal
from sqlalchemy.future import select
from app.services.database_service import process_database_service
from fastapi import APIRouter, HTTPException, Request
from app.services.notification_service import send_notification
import json
import os
from app.unipro_data_service.unipro_conv import unipro_convert
import tempfile
from dotenv import load_dotenv
from typing import List


# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
router = APIRouter()


# Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ë–î
async def get_db():
    async with AsyncSessionLocal() as db:
        yield db

@router.post("/mapping_branch/")
async def create_mapping_branch(
    mapping_data: MappingBranchSchema, 
    db: AsyncSession = Depends(get_db)
):
    """
    –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ mapping_branch.
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º branch
    existing_entry = await db.execute(select(MappingBranch).filter(MappingBranch.branch == mapping_data.branch))
    if existing_entry.scalars().first():
        raise HTTPException(status_code=400, detail="Branch already exists.")

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
    new_entry = MappingBranch(**mapping_data.dict())
    db.add(new_entry)
    await db.commit()
    await db.refresh(new_entry)

    return {"detail": "Mapping branch created successfully", "data": new_entry}



# @router.get("/mapping_branch/{enterprise_code}", response_model=List[MappingBranchSchema])
# async def get_mapping_branches(
#     enterprise_code: str, 
#     db: AsyncSession = Depends(get_db)
# ):
#     """
#     –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ MappingBranch –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ enterprise_code.
#     """
#     print(f"üîç –ü–æ–ª—É—á–µ–Ω GET-–∑–∞–ø—Ä–æ—Å –Ω–∞ /mapping_branch/{enterprise_code}")

#     result = await db.execute(select(MappingBranch).filter(MappingBranch.enterprise_code == enterprise_code))
#     branches = result.scalars().all()

#     if not branches:
#         raise HTTPException(status_code=404, detail="No mapping branches found for this enterprise.")

#     return branches  # ‚úÖ –¢–µ–ø–µ—Ä—å FastAPI –∑–Ω–∞–µ—Ç, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è List[MappingBranchSchema]




@router.post("/developer_panel/unipro/data")
async def receive_unipro_data(request: Request, body: dict):
    """
    –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç Unipro —á–µ—Ä–µ–∑ POST-–∑–∞–ø—Ä–æ—Å.
    """
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        temp_dir = os.getenv("TEMP_FILE_PATH", tempfile.gettempdir())
        os.makedirs(temp_dir, exist_ok=True)  # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        file_type = "unipro_data"
        json_file_path = os.path.join(temp_dir, f"{file_type}.json")

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ JSON –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
        with open(json_file_path, "w", encoding="utf-8") as json_file:
            json.dump(body, json_file, ensure_ascii=False, indent=4)

        await unipro_convert(json_file_path)
        return {"status": "success", "message": "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –∏ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –ª–æ–≥"}
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# Dependency –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
async def get_db():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."""
    async with database.AsyncSessionLocal() as db:
        yield db

# ----------------------------
# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
# ----------------------------

@router.post("/login/")
async def login_user(credentials: schemas.LoginSchema, db: AsyncSession = Depends(get_db)):
    print("Received credentials:", credentials.dict())  # <-- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º `select`
    result = await db.execute(select(DeveloperSettings).filter(
        DeveloperSettings.developer_login == credentials.developer_login,
        DeveloperSettings.developer_password == credentials.developer_password,
    ))

    user = result.scalars().first()

    if not user:
        raise HTTPException(status_code=401, detail="Invalid login or password.")

    return {"developer_login": user.developer_login, "token": "dummy_token"}

# ----------------------------
# –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
# ----------------------------
@router.get("/developer/settings/")
async def get_all_developer_settings(db: AsyncSession = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Å–µ—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""
    result = await db.execute(select(DeveloperSettings))
    developers = result.scalars().all()
    return [{"developer_login": dev.developer_login, "error_email_developer": dev.error_email_developer} for dev in developers]

@router.get("/developer/settings/{developer_login}")
async def get_developer_settings_by_login(developer_login: str, db: AsyncSession = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–æ –ª–æ–≥–∏–Ω—É."""
    result = await db.execute(select(DeveloperSettings).filter(DeveloperSettings.developer_login == developer_login))
    user = result.scalars().first()

    if not user:
        raise HTTPException(status_code=404, detail="Developer not found.")
    return user

@router.put("/developer/settings/{developer_login}")
async def update_developer_settings(
    developer_login: str,
    settings: DeveloperSettingsSchema,
    db: AsyncSession = Depends(get_db),
):
    """–û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–æ –ª–æ–≥–∏–Ω—É."""
    result = await db.execute(select(DeveloperSettings).filter(DeveloperSettings.developer_login == developer_login))
    user = result.scalars().first()

    if not user:
        raise HTTPException(status_code=404, detail="Developer not found.")

    for key, value in settings.dict().items():
        setattr(user, key, value)
    
    # –ö–æ–º–º–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
    await db.commit()
    return user

# ----------------------------
# –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π
# ----------------------------
@router.get("/enterprise/settings/")
async def get_all_enterprises(db: AsyncSession = Depends(get_db)):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π.
    """
    result = await db.execute(select(EnterpriseSettings))
    enterprises = result.scalars().all()
    
    if not enterprises:
        return []  # –í–µ—Ä–Ω—ë–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç
    return enterprises

@router.get("/enterprise/settings/{enterprise_code}")
async def get_enterprise_by_code(enterprise_code: str, db: AsyncSession = Depends(get_db)):
    """
    –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è.
    """
    result = await db.execute(select(EnterpriseSettings).filter(EnterpriseSettings.enterprise_code == enterprise_code))
    enterprise = result.scalars().first()
    
    if not enterprise:
        raise HTTPException(status_code=404, detail="Enterprise not found.")
    
    return EnterpriseSettingsSchema.from_orm(enterprise)

@router.post("/enterprise/settings/")
async def create_enterprise(settings: EnterpriseSettingsSchema, db: AsyncSession = Depends(get_db)):
    """
    –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ.
    """
    existing = await db.execute(select(EnterpriseSettings).filter(EnterpriseSettings.enterprise_code == settings.enterprise_code))
    existing_enterprise = existing.scalars().first()

    if existing_enterprise:
        raise HTTPException(status_code=400, detail="Enterprise with this code already exists.")
    
    new_enterprise = EnterpriseSettings(**settings.dict())
    db.add(new_enterprise)
    await db.commit()
    await db.refresh(new_enterprise)
    
    return new_enterprise

@router.put("/enterprise/settings/{enterprise_code}")
async def update_enterprise_settings(
    enterprise_code: str,
    updated_settings: EnterpriseSettingsSchema,
    db: AsyncSession = Depends(get_db),
):
    """
    –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è –ø–æ –∫–æ–¥—É.
    """
    result = await db.execute(select(EnterpriseSettings).filter(EnterpriseSettings.enterprise_code == enterprise_code))
    enterprise = result.scalars().first()

    if not enterprise:
        raise HTTPException(status_code=404, detail="Enterprise not found.")

    for key, value in updated_settings.dict(exclude_unset=True).items():
        setattr(enterprise, key, value)

    await db.commit()
    await db.refresh(enterprise)

    return {"detail": "Enterprise settings updated successfully", "data": enterprise}

# ----------------------------
# –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è data_formats
# ----------------------------

@router.post("/data_formats/")
async def add_data_format(data_format: schemas.DataFormatSchema, db: AsyncSession = Depends(get_db)):
    """
    –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.
    """
    existing_format = await db.execute(select(DataFormat).filter(DataFormat.format_name == data_format.format_name))
    existing = existing_format.scalars().first()
    
    if existing:
        raise HTTPException(status_code=400, detail="Data format already exists.")
    
    new_format = DataFormat(format_name=data_format.format_name)
    db.add(new_format)
    await db.commit()
    await db.refresh(new_format)
    return {"detail": "Data format added successfully", "data": new_format}

@router.get("/data_formats/")
async def get_data_formats(db: AsyncSession = Depends(get_db)):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–∞–Ω–Ω—ã—Ö.
    """
    result = await db.execute(select(DataFormat))
    formats = result.scalars().all()
    return formats

@router.delete("/data_formats/{format_id}")
async def delete_data_format(format_id: int, db: AsyncSession = Depends(get_db)):
    """
    –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ ID.
    """
    result = await db.execute(select(DataFormat).filter(DataFormat.id == format_id))
    format_to_delete = result.scalars().first()
    
    if not format_to_delete:
        raise HTTPException(status_code=404, detail="Data format not found.")
    
    await db.delete(format_to_delete)
    await db.commit()
    return {"detail": "Data format deleted successfully"}
@router.post("/catalog/")
async def upload_catalog(file: UploadFile, enterprise_code: str, db: AsyncSession = Depends(get_db)):
    try:
        file_content = await file.read()
        file_path = f"/tmp/{file.filename}"
        
        with open(file_path, "wb") as f:
            f.write(file_content)

        # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        await process_database_service(file_path, "catalog", enterprise_code)
        
        return {"message": "Catalog data processed successfully."}

    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/stock/")
async def upload_stock(file: UploadFile, enterprise_code: str, db: AsyncSession = Depends(get_db)):
    try:
        file_content = await file.read()
        file_path = f"/tmp/{file.filename}"

        with open(file_path, "wb") as f:
            f.write(file_content)

        # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        await process_database_service(file_path, "stock", enterprise_code)
        
        return {"message": "Stock data processed successfully."}

    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

