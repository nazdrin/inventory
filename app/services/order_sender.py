# app/services/order_sender.py

import aiohttp
import base64
import json
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from app.models import DeveloperSettings



async def send_orders_to_tabletki(
    session: AsyncSession,
    orders: list,
    tabletki_login: str,
    tabletki_password: str,
    cancel_reason: int,  # ‚Üê —Ç–µ–ø–µ—Ä—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä, –ë–ï–ó –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–∫–∞–∑—ã –≤ Tabletki.ua –ø–æ API:
    - —Å—Ç–∞—Ç—É—Å 4 –∏–ª–∏ 6: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ‚Üí /api/orders
    - —Å—Ç–∞—Ç—É—Å 7 –∏–ª–∏ –≤—Å–µ qtyShip == 0: –æ—Ç–∫–∞–∑ ‚Üí /api/Orders/cancelledOrders
    –ü–æ–ª–µ id_CancelReason –±–µ—Ä—ë—Ç—Å—è –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ cancel_reason.
    """
    dev_settings = await session.execute(select(DeveloperSettings.endpoint_orders))
    endpoint_orders = dev_settings.scalar()

    auth_header = base64.b64encode(f"{tabletki_login}:{tabletki_password}".encode()).decode()
    headers = {
        "accept": "application/json",
        "Authorization": f"Basic {auth_header}"
    }

    async with aiohttp.ClientSession() as http_session:
        for order in orders:
            is_cancel = (order.get("statusID") == 7) or all(
                (row.get("qtyShip", 0) == 0) for row in order.get("rows", [])
            )

            if is_cancel:
                url = f"{endpoint_orders}/api/Orders/cancelledOrders"
                cancel_data = [{
                    "id": order["id"],
                    "id_CancelReason": cancel_reason,  # ‚Üê –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ö–æ–¥–Ω–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç
                    "rows": [
                        {
                            "goodsCode": item["goodsCode"],
                            "qty": item.get("qty", item.get("qtyShip", 0))
                        } for item in order["rows"]
                    ]
                }]
                print(f"üö´ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∫–∞–∑–∞ –∑–∞–∫–∞–∑–∞ {order['id']} (id_CancelReason={cancel_reason}):")
                print(json.dumps(cancel_data, indent=2, ensure_ascii=False))
                async with http_session.post(url, json=cancel_data, headers=headers) as response:
                    print(f"üì¨ –û—Ç–≤–µ—Ç –ø—Ä–∏ –æ—Ç–∫–∞–∑–µ: {response.status}, {await response.text()}")

            elif order.get("statusID") in [4, 6]:
                valid_rows = [item for item in order["rows"] if item.get("qtyShip", 0) > 0]
                if not valid_rows:
                    print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω –∑–∞–∫–∞–∑ {order['id']} ‚Äî –Ω–µ—Ç —Å—Ç—Ä–æ–∫ —Å qtyShip > 0")
                    continue

                order_to_send = dict(order)
                order_to_send["rows"] = valid_rows

                url = f"{endpoint_orders}/api/orders"
                async with http_session.post(url, json=[order_to_send], headers=headers) as response:
                    print(f"‚úÖ –ó–∞–∫–∞–∑ {order['id']} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {response.status}, {await response.text()}")
					
async def send_single_order_status_2(session: AsyncSession, order: dict, tabletki_login: str, tabletki_password: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–∫–∞–∑ –Ω–∞ Tabletki.ua —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 2.0 ‚Äî —Ä—É—á–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±–µ–∑ –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤.
    """
    dev_settings = await session.execute(select(DeveloperSettings.endpoint_orders))
    endpoint_orders = dev_settings.scalar()

    auth_header = base64.b64encode(f"{tabletki_login}:{tabletki_password}".encode()).decode()
    headers = {
        "accept": "application/json",
        "Authorization": f"Basic {auth_header}"
    }

    url = f"{endpoint_orders}/api/orders"
    valid_rows = [item for item in order["rows"] if item.get("qty", 0) > 0 or item.get("qtyShip", 0) > 0]

    if not valid_rows:
        print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω –∑–∞–∫–∞–∑ {order['id']} ‚Äî –Ω–µ—Ç —Å—Ç—Ä–æ–∫ —Å qty –∏–ª–∏ qtyShip > 0")
        return

    order["rows"] = valid_rows

    async with aiohttp.ClientSession() as http_session:
        async with http_session.post(url, json=[order], headers=headers) as response:
            response_text = await response.text()
            print(f"üì§ –ó–∞–∫–∞–∑ {order['id']} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ Tabletki —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 2.0. –°—Ç–∞—Ç—É—Å: {response.status}")
            print(f"üì® –û—Ç–≤–µ—Ç: {response_text}")