import os
import logging
import json
import aiohttp
from sqlalchemy.future import select
from sqlalchemy.ext.asyncio import AsyncSession
from app.database import get_async_db, DeveloperSettings, EnterpriseSettings
from app.services.notification_service import send_notification  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
from datetime import datetime,timezone
import pytz
local_tz = pytz.timezone('Europe/Kiev')
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')


TEMP_FILE_PATH = os.getenv("TEMP_FILE_PATH", "./temp_logs")

async def save_catalog_log(enterprise_code: str, formatted_json: dict):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç JSON-–¥–∞–Ω–Ω—ã–µ —Å—Ç–æ–∫–∞ –≤ —Ñ–∞–π–ª –≤ –∫–∞—Ç–∞–ª–æ–≥–µ TEMP_FILE_PATH."""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞–ø–∫—É –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è
        catalog_folder = os.path.join(TEMP_FILE_PATH, enterprise_code)
        os.makedirs(catalog_folder, exist_ok=True)  # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞: stock_{–¥–∞—Ç–∞}.json
        file_name = "catalog.json"
        file_path = os.path.join(catalog_folder, file_name)

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º JSON –≤ —Ñ–∞–π–ª (–ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π)
        with open(file_path, "w", encoding="utf-8") as file:
            json.dump(formatted_json, file, ensure_ascii=False, indent=4)

    except Exception as e:
        logging.error(f"Failed to save catalog JSON log for enterprise_code={enterprise_code}: {str(e)}")
        

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
SUPPLIER_MAPPING = {
    "morion": 1,
    "tabletki": 2,
    "barcode": 3,
    "badm": 4,
    "optima": 5
}

# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
async def transform_data(raw_data: list, developer_settings: DeveloperSettings,enterprise_code):
    try:
        suppliers = []
        offers = []

        # –§–æ—Ä–º–∏—Ä—É–µ–º Suppliers
        for supplier_key, supplier_id in SUPPLIER_MAPPING.items():
            edrpo = getattr(developer_settings, supplier_key, None)
            suppliers.append({
                "ID": str(supplier_id),
                "Name": supplier_key.capitalize(),
                "Edrpo": edrpo
            })

        # –§–æ—Ä–º–∏—Ä—É–µ–º Offers
        for item in raw_data:
            supplier_codes = [
                {"ID": str(SUPPLIER_MAPPING[key]), "Code": value}
                for key, value in item.items() if key in SUPPLIER_MAPPING
            ]

            # –§–∏–ª—å—Ç—Ä—É–µ–º SupplierCodes, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã —Å –ø—É—Å—Ç—ã–º ID, ID == 'None' –∏–ª–∏ ID == '0'
            supplier_codes = [
                supplier for supplier in supplier_codes 
                if supplier["ID"] not in ["", "0", "None"] and supplier["Code"] not in ["", "None"]
            ]
            offers.append({
                "Code": item.get("code", ""),
                "Name": item.get("name", ""),
                "Producer": item.get("producer", ""),
                "VAT": item.get("vat", 0.0),
                "SupplierCodes": supplier_codes
            })

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        return {
            "Suppliers": suppliers,
            "Offers": offers
        }

    except Exception as e:
        logging.error(f"Error transforming data: {str(e)}")
        send_notification(f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–∞–ª–æ–≥–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π {str(e)} –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è {enterprise_code}",enterprise_code)
        raise

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç
async def post_data_to_endpoint(endpoint: str, data: dict, login: str, password: str,enterprise_code):
    try:
        headers = {"Content-Type": "application/json"}
        auth = aiohttp.BasicAuth(login, password)

        async with aiohttp.ClientSession() as session:
            async with session.post(endpoint, json=data, headers=headers, auth=auth) as response:
                response_text = await response.text()
                return response.status, response_text
    except Exception as e:
        logging.error(f"Error posting data to endpoint: {str(e)}")
        send_notification(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ –Ω–∞ –µ–Ω–¥–ø–æ–∏–Ω—Ç {str(e)} –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è {enterprise_code}",enterprise_code)
        raise

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
async def export_catalog(enterprise_code: str, raw_data: list):
    async with get_async_db() as db:
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
            result = await db.execute(select(DeveloperSettings).limit(1))
            developer_settings = result.scalar_one_or_none()
            if not developer_settings:
                logging.error("DeveloperSettings not found.")
                send_notification(f"–û—à–∏–±–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è {enterprise_code}",enterprise_code)
                return

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è
            result = await db.execute(
                select(EnterpriseSettings).where(EnterpriseSettings.enterprise_code == enterprise_code)
            )
            enterprise_settings = result.scalar_one_or_none()
            if not enterprise_settings:
                logging.error(f"EnterpriseSettings not found for enterprise_code: {enterprise_code}")
                send_notification(f"–û—à–∏–±–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∫–æ–¥–∞ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è {enterprise_code}",enterprise_code)
                return

            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            transformed_data = await transform_data(raw_data, developer_settings,enterprise_code)

            # –í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –≤ –∫–æ–Ω—Å–æ–ª—å
            await save_catalog_log(enterprise_code, transformed_data)
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
            endpoint = f"{developer_settings.endpoint_catalog}/Import/Ref/{enterprise_settings.branch_id}"
            logging.info(f"Prepared endpoint URL: {endpoint}")

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
            await post_data_to_endpoint(endpoint,transformed_data, enterprise_settings.tabletki_login, enterprise_settings.tabletki_password,enterprise_code )
            
            if developer_settings.message_orders:
                send_notification(f"üü° –ö–∞—Ç–∞–ª–æ–≥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", enterprise_code)

        except Exception as e:
            logging.error(f"Error exporting catalog for enterprise_code={enterprise_code}: {str(e)}")
            send_notification(f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ {str(e)} –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è {enterprise_code}",enterprise_code)



