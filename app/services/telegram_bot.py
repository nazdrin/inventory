import asyncio
import os
from aiogram import Bot, Dispatcher, types, Router
from aiogram.filters import Command
from aiogram.types import Message
from app.database import get_async_db, MappingBranch
from dotenv import load_dotenv
from sqlalchemy import text

load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()

dp.include_router(router)

@router.message(Command("start"))
async def start_handler(message: Message):
    await message.answer("–í—ñ—Ç–∞—î–º–æ! –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Å–µ—Ä—ñ–π–Ω–∏–π –Ω–æ–º–µ—Ä –∞–ø—Ç–µ–∫–∏ –∞–±–æ –º–∞–≥–∞–∑–∏–Ω—É –¥–ª—è –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó.")

@router.message(lambda message: message.text.isdigit())
async def branch_handler(message: Message):
    user_id = str(message.from_user.id)  # –í—Å–µ–≥–¥–∞ —Å—Ç—Ä–æ–∫–∞!
    branch = message.text
    
    async with get_async_db() as session:
        branch_entry = await session.get(MappingBranch, branch)
        
        if branch_entry:
            # –§–∏–ª—å—Ç—Ä—É–µ–º NULL, –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
            valid_ids = {uid for uid in branch_entry.id_telegram if uid and uid.isdigit()} if branch_entry.id_telegram else set()
            
            if not valid_ids:
                # –ï—Å–ª–∏ –≤ –ø–æ–ª–µ –±—ã–ª–∏ —Ç–æ–ª—å–∫–æ NULL –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∑–∞–º–µ–Ω—è–µ–º –µ–≥–æ –Ω–æ–≤—ã–º ID
                branch_entry.id_telegram = [user_id]
                await message.answer("‚úÖ –í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ! –ó–∞—Ä–∞–∑ –≤–∏ —î–¥–∏–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –¥–ª—è —Ü—å–æ–≥–æ —Å–µ—Ä—ñ–π–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞.")
            elif user_id in valid_ids:
                await message.answer("‚ÑπÔ∏è –í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –¥–ª—è —Ü—å–æ–≥–æ —Å–µ—Ä—ñ–π–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞.")
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫
                valid_ids.add(user_id)
                branch_entry.id_telegram = list(valid_ids)
                await message.answer("‚úÖ –í–∞—à ID —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ —Ü—å–æ–≥–æ —Å–µ—Ä—ñ–π–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞.")
            
            session.add(branch_entry)
            await session.commit()
        else:
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞! –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Å–µ—Ä—ñ–π–Ω–∏–π –Ω–æ–º–µ—Ä.")

async def notify_user(branch: str, codes: list):
        
    async with get_async_db() as session:
        branch_entry = await session.get(MappingBranch, branch)
        
        if branch_entry and branch_entry.id_telegram:
            user_ids = [uid for uid in branch_entry.id_telegram if uid and uid.isdigit()]  # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            orders_list = "\n".join(f"{i+1}. {code}" for i, code in enumerate(codes))
            message_text = f"‚úÖ *–ù–æ–≤–µ(—ñ) –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!* \n\nüìå *–ù–æ–º–µ—Ä:* \n\n{orders_list}"
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            for user_id in user_ids:
                await bot.send_message(chat_id=int(user_id), text=message_text, parse_mode="Markdown")

async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

