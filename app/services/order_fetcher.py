# services/order_fetcher.py

import base64
import aiohttp
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from app.models import DeveloperSettings, EnterpriseSettings, MappingBranch

async def fetch_orders_for_enterprise(session: AsyncSession, enterprise_code: str):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–∫–∞–∑—ã –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è (enterprise_code),
    –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ñ–ª–∞–≥ `order_fetcher = True` –∏ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∏–ª–∏–∞–ª—ã.

    Args:
        session (AsyncSession): –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –ë–î
        enterprise_code (str): –∫–æ–¥ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è

    Returns:
        list: —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤, –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã
    """
    # –ü–æ–ª—É—á–∞–µ–º URL API –∑–∞–∫–∞–∑–æ–≤ –∏–∑ DeveloperSettings
    dev_settings = await session.execute(select(DeveloperSettings.endpoint_orders))
    endpoint_orders = dev_settings.scalar()

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è
    enterprise_q = await session.execute(
        select(EnterpriseSettings).where(EnterpriseSettings.enterprise_code == enterprise_code)
    )
    enterprise = enterprise_q.scalar()

    if not enterprise:
        print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ EnterpriseSettings –¥–ª—è enterprise_code={enterprise_code}")
        return []

    if not enterprise.order_fetcher:
        print(f"‚ÑπÔ∏è –§–ª–∞–≥ order_fetcher=False, –ø—Ä–æ–ø—É—Å–∫: enterprise_code={enterprise_code}")
        return []

    # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Basic Auth (–ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫)
    auth_header = base64.b64encode(
        f"{enterprise.tabletki_login}:{enterprise.tabletki_password}".encode()
    ).decode()
    headers = {
        "accept": "application/json",
        "Authorization": f"Basic {auth_header}"
    }

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª–∏–∞–ª–æ–≤, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—é
    branches_q = await session.execute(
        select(MappingBranch.branch).where(MappingBranch.enterprise_code == enterprise_code)
    )
    branches = [row[0] for row in branches_q.fetchall()]
    if not branches:
        print(f"‚ö†Ô∏è –ù–µ—Ç —Ñ–∏–ª–∏–∞–ª–æ–≤ –≤ MappingBranch –¥–ª—è enterprise_code={enterprise_code}")
        return []

    all_orders = []
    async with aiohttp.ClientSession() as http_session:
        for branch in branches:
            for status in [0, 1, 2, 3, 4]:  # –°–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç—É—Å-–∫–æ–¥–æ–≤ –∏–∑ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏
                url = f"{endpoint_orders}/api/Orders/{branch}/{status}"
                try:
                    async with http_session.get(url, headers=headers) as response:
                        print(f"üåê –ó–∞–ø—Ä–æ—Å –∑–∞–∫–∞–∑–æ–≤: {url}")
                        if response.status == 200:
                            data = await response.json()
                            if isinstance(data, list):
                                all_orders.extend(data)
                            else:
                                print(f"‚ö†Ô∏è –û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º –¥–ª—è branch={branch}, status={status}")
                        else:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∑–∞–∫–∞–∑–æ–≤: {response.status} –¥–ª—è branch={branch}")
                except Exception as e:
                    print(f"üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è branch={branch}, status={status}: {str(e)}")

    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –≤—Å–µ–≥–æ {len(all_orders)} –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è {enterprise_code}")
    return all_orders