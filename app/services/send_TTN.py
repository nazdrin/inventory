import base64
import logging
import httpx
from sqlalchemy import select
from app.models import DeveloperSettings, EnterpriseSettings
from sqlalchemy.ext.asyncio import AsyncSession

async def send_ttn(session: AsyncSession, id: str, enterprise_code: str, ttn: str, deliveryServiceAlias: str, phoneNumber: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç TTN –≤ Tabletki.ua, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    """
    logging.info(f"üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ TTN –¥–ª—è –∑–∞–∫–∞–∑–∞ {id}...")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ (endpoint)
    dev_settings = await session.execute(select(DeveloperSettings.endpoint_orders))
    endpoint_orders = dev_settings.scalar()

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è
    enterprise_q = await session.execute(
        select(EnterpriseSettings).where(EnterpriseSettings.enterprise_code == enterprise_code)
    )
    enterprise = enterprise_q.scalar()

    if not enterprise:
        logging.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ EnterpriseSettings –¥–ª—è enterprise_code={enterprise_code}")
        return

    auth_header = base64.b64encode(
        f"{enterprise.tabletki_login}:{enterprise.tabletki_password}".encode()
    ).decode()
    headers = {
        "accept": "application/json",
        "Authorization": f"Basic {auth_header}"
    }

    async with httpx.AsyncClient() as client:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ TTN
        status_url = f"{endpoint_orders}/api/Delivery/status/{id}"
        status_resp = await client.get(status_url, headers=headers)
        if status_resp.status_code != 200:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ TTN: {status_resp.status_code}")
            return

        status_data = status_resp.json()
        if status_data.get("ttN_Number"):
            logging.info(f"‚úÖ TTN —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {status_data['ttN_Number']}")
            return

        # –û—Ç–ø—Ä–∞–≤–∫–∞ TTN, –µ—Å–ª–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        post_headers = headers.copy()
        post_headers["Content-Type"] = "application/json-patch+json"
        payload = [
            {
                "id": id,
                "ttn": ttn,
                "deliveryServiceAlias": deliveryServiceAlias,
                "phoneNumber": phoneNumber
            }
        ]
        post_url = f"{endpoint_orders}/api/Orders/ttnForOrder"
        post_resp = await client.post(post_url, json=payload, headers=post_headers)

        if post_resp.status_code == 200:
            logging.info(f"üì¶ TTN —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {ttn}, {deliveryServiceAlias}, {phoneNumber}")
        else:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ TTN: {post_resp.status_code}, {post_resp.text}")
