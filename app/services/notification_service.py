import os
import requests
from typing import Optional, Tuple, Union

from dotenv import load_dotenv
from sqlalchemy import create_engine, text

# ---------------------------------------
# ENV / –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏
# ---------------------------------------
load_dotenv()
TOKEN = os.getenv("TELEGRAM_DEVELOP")

TELEGRAM_API = f"https://api.telegram.org/bot{TOKEN}/sendMessage"
CHAT_IDS = [807661373, 1041598119]


# ---------------------------------------
# –î–æ–ø–æ–º—ñ–∂–Ω–µ: –æ—Ç—Ä–∏–º–∞—î–º–æ sync-URL –ë–î
# ---------------------------------------
def _normalize_to_sync_url(url: str) -> str:
    """
    –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î async URL –Ω–∞ sync URL –¥–ª—è PostgreSQL.
    –ù–∞–ø—Ä.: postgresql+asyncpg:// -> postgresql+psycopg2://
    """
    if not url:
        return url
    if url.startswith("postgresql+asyncpg://"):
        return url.replace("postgresql+asyncpg://", "postgresql+psycopg2://", 1)
    # –Ø–∫—â–æ –ø—Ä–æ—Å—Ç–æ 'postgresql://' ‚Äî —Ü–µ –≤–∂–µ –æ–∫ –¥–ª—è psycopg2
    return url


def _resolve_sync_db_url() -> Optional[str]:
    """
    –ü–æ—Ä—è–¥–æ–∫ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É:
    1) SYNC_DATABASE_URL
    2) DATABASE_SYNC_URL
    3) DATABASE_URL (–∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –¥–æ sync, —è–∫—â–æ async)
    4) DB_URL (—á–∞—Å—Ç–æ —Ç–∞–∫ –Ω–∞–∑–∏–≤–∞—é—Ç—å)
    """
    candidates = [
        os.getenv("SYNC_DATABASE_URL"),
        os.getenv("DATABASE_SYNC_URL"),
        os.getenv("DATABASE_URL"),
        os.getenv("DB_URL"),
    ]
    for raw in candidates:
        if raw and raw.strip():
            return _normalize_to_sync_url(raw.strip())
    return None


_SYNC_DB_URL = _resolve_sync_db_url()
_SYNC_ENGINE = create_engine(_SYNC_DB_URL, pool_pre_ping=True) if _SYNC_DB_URL else None


# ---------------------------------------
# –î–æ—Å—Ç—É–ø –¥–æ –ë–î (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
# ---------------------------------------
def _fetch_enterprise_meta_sync(enterprise_code: str) -> Optional[Tuple[Optional[str], Optional[str]]]:
    """
    –°–ò–ù–•–†–û–ù–ù–û –¥—ñ—Å—Ç–∞—î (enterprise_name, data_format) –∑ —Ç–∞–±–ª–∏—Ü—ñ enterprise_settings
    –∑–∞ enterprise_code. –ü–æ–≤–µ—Ä—Ç–∞—î None, —è–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–æ—ó –ë–î.
    """
    if not _SYNC_ENGINE:
        return None

    sql = text("""
        SELECT enterprise_name, data_format
        FROM enterprise_settings
        WHERE CAST(enterprise_code AS TEXT) = :code
        LIMIT 1
    """)
    try:
        with _SYNC_ENGINE.connect() as conn:
            row = conn.execute(sql, {"code": str(enterprise_code)}).first()
            if not row:
                return None
            # row[0] -> enterprise_name, row[1] -> data_format
            return row[0], row[1]
    except Exception:
        # –ó–∞ –ø–æ—Ç—Ä–µ–±–∏ –¥–æ–¥–∞–π—Ç–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è
        return None


# ---------------------------------------
# –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É
# ---------------------------------------
def _build_text(
    message: str,
    enterprise_code: Optional[str],
    meta: Optional[Tuple[Optional[str], Optional[str]]],
) -> str:
    """
    - –ë–µ–∑ enterprise_code ‚Üí –ª–∏—à–µ message.
    - –ó enterprise_code ‚Üí –∑–∞–≤–∂–¥–∏ –¥–æ–¥–∞—î–º–æ:
        Enterprise Code, –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è, –§–æ—Ä–º–∞—Ç.
      –Ø–∫—â–æ –º–µ—Ç–∞–¥–∞–Ω–∏—Ö –Ω–µ–º–∞—î, –ø—ñ–¥—Å—Ç–∞–≤–ª—è—î–º–æ '‚Äî'.
    """
    if not enterprise_code:
        return f"{message}"

    enterprise_name = meta[0] if meta else None
    data_format = meta[1] if meta else None

    lines = [
        message,
        "",
        f"Enterprise Code: {enterprise_code}",
        f"–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è: {enterprise_name or '‚Äî'}",
        f"–§–æ—Ä–º–∞—Ç: {data_format or '‚Äî'}",
    ]
    return "\n".join(lines)


# ---------------------------------------
# –ü—É–±–ª—ñ—á–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
# ---------------------------------------
def send_notification(message: str, enterprise_code: Optional[Union[str, int]] = None) -> None:
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É Telegram.

    - –Ø–∫—â–æ enterprise_code –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ ‚Üí –Ω–∞–¥—Å–∏–ª–∞—î—Ç—å—Å—è –ª–∏—à–µ message.
    - –Ø–∫—â–æ enterprise_code –ø–µ—Ä–µ–¥–∞–Ω–æ ‚Üí –¥–æ–¥–∞—é—Ç—å—Å—è Enterprise Code, –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è —ñ –§–æ—Ä–º–∞—Ç.
    """
    if not TOKEN:
        # –ù–µ–º–∞—î —Ç–æ–∫–µ–Ω–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –≤—ñ–¥–ø—Ä–∞–≤–∫—É
        return

    meta: Optional[Tuple[Optional[str], Optional[str]]] = None
    code_str: Optional[str] = None

    if enterprise_code is not None and str(enterprise_code).strip():
        code_str = str(enterprise_code).strip()
        meta = _fetch_enterprise_meta_sync(code_str)

    text = _build_text(message, code_str, meta)

    for chat_id in CHAT_IDS:
        payload = {"chat_id": chat_id, "text": text}
        try:
            requests.post(TELEGRAM_API, data=payload, timeout=15)
        except Exception:
            # –ó–∞ –ø–æ—Ç—Ä–µ–±–∏ –¥–æ–¥–∞–π—Ç–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è
            pass


# –õ–æ–∫–∞–ª—å–Ω–∏–π —Ç–µ—Å—Ç:
# if __name__ == "__main__":
#     send_notification("üü° –ö–∞—Ç–∞–ª–æ–≥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", 328)
#     send_notification("‚úÖ –°—Ç–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", 320)
#     send_notification("‚ÑπÔ∏è –°–∏—Å—Ç–µ–º–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–µ–∑ –ø—Ä–∏–≤'—è–∑–∫–∏ –¥–æ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞")
