# app/services/order_scheduler_service.py
import os
import asyncio
import logging
import pytz
from datetime import datetime, timezone
from sqlalchemy.future import select

os.environ['TZ'] = 'UTC'
KIEV_TZ = pytz.timezone("Europe/Kiev")

from app.database import get_async_db, EnterpriseSettings
from app.services.notification_service import send_notification
from app.services.order_fetcher import fetch_orders_for_enterprise

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Å—Ç–æ–∫—É)
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

async def notify_error(message: str, enterprise_code: str = "unknown"):
    logging.error(message)
    send_notification(message, enterprise_code)

async def get_enterprises_for_order_fetcher(db):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ enterprise_code, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –≤–∫–ª—é—á—ë–Ω —Ñ–ª–∞–≥ order_fetcher=True.
    """
    try:
        db.expire_all()
        now = datetime.now(tz=timezone.utc).astimezone(KIEV_TZ)
        logging.info(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {now} [Timezone: {now.tzinfo}]")

        result = await db.execute(
            select(EnterpriseSettings.enterprise_code).where(EnterpriseSettings.order_fetcher == True)
        )
        return [row[0] for row in result.fetchall()]
    except Exception as e:
        await notify_error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π –¥–ª—è fetcher: {e}")
        return []

async def schedule_order_fetcher_tasks():
    """
    –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –∑–∞–±–æ—Ä–∞ –∑–∞–∫–∞–∑–æ–≤:
    - –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –∏—â–µ—Ç –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è —Å order_fetcher=True –∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—ã–∑—ã–≤–∞–µ—Ç fetch_orders_for_enterprise.
    """
    interval_minutes = 1
    try:
        async with get_async_db() as db:
            while True:
                logging.info("üì• –ü–æ–∏—Å–∫ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π —Å —Ñ–ª–∞–≥–æ–º order_fetcher=True...")
                fetcher_enterprises = await get_enterprises_for_order_fetcher(db)

                if fetcher_enterprises:
                    logging.info(f"üîÑ –ù–∞–π–¥–µ–Ω–æ {len(fetcher_enterprises)} –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤")
                    for enterprise_code in fetcher_enterprises:
                        try:
                            await fetch_orders_for_enterprise(db, enterprise_code)
                            logging.info(f"‚úÖ –ó–∞–∫–∞–∑—ã –ø–æ–ª—É—á–µ–Ω—ã –¥–ª—è {enterprise_code}")
                        except Exception as fe:
                            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è {enterprise_code}: {fe}")
                            await notify_error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è {enterprise_code}: {fe}", enterprise_code)
                else:
                    logging.info("üì≠ –ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è —Å order_fetcher=True –Ω–µ –Ω–∞–π–¥–µ–Ω—ã ‚Äì –∑–∞–∫–∞–∑–æ–≤ –Ω–µ –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–æ")

                logging.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 1 –º–∏–Ω—É—Ç—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ü–∏–∫–ª–æ–º –∑–∞–∫–∞–∑–æ–≤...")
                await asyncio.sleep(interval_minutes * 60)
    except Exception as main_error:
        await notify_error(f"üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –∑–∞–∫–∞–∑–æ–≤: {str(main_error)}", "order_scheduler")
    finally:
        await notify_error("‚ùå –°–µ—Ä–≤–∏—Å order_scheduler –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", "order_scheduler")

if __name__ == "__main__":
    asyncio.run(schedule_order_fetcher_tasks())