# feed_parser.py
import json
import logging
import requests
import xml.etree.ElementTree as ET
from typing import Optional, List, Dict

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# –¢–∏–ø–æ–≤—ñ –Ω–∞–∑–≤–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —à—Ç—Ä–∏—Ö–∫–æ–¥—É, —è–∫—ñ –∑—É—Å—Ç—Ä—ñ—á–∞—é—Ç—å—Å—è —É —Ñ—ñ–¥–∞—Ö
BARCODE_PARAM_NAMES = {
    "–®—Ç—Ä–∏—Ö–∫–æ–¥", "–®—Ç—Ä–∏—Ö-–∫–æ–¥", "–®—Ç—Ä–∏—Ö –∫–æ–¥",
    "EAN", "EAN-13", "UPC", "GTIN", "Barcode", "barcode"
}

def _get_text(el: ET.Element, candidates: List[str]) -> Optional[str]:
    """–ü–æ–≤–µ—Ä—Ç–∞—î —Ç–µ–∫—Å—Ç –ø–µ—Ä—à–æ–≥–æ –Ω–∞—è–≤–Ω–æ–≥–æ –ø—ñ–¥–≤—É–∑–ª–∞ –∑ –ø–µ—Ä–µ–ª—ñ–∫—É –Ω–∞–∑–≤."""
    for tag in candidates:
        child = el.find(tag)
        if child is not None and child.text and child.text.strip():
            return child.text.strip()
    return None

def _extract_barcode(el: ET.Element) -> Optional[str]:
    """–ü–æ—à—É–∫ —à—Ç—Ä–∏—Ö–∫–æ–¥—É –≤ —Ç–∏–ø–æ–≤–∏—Ö –ø–æ–ª—è—Ö —Ç–∞ –≤ <param name='...'>."""
    # 1) –ü—Ä—è–º—ñ –ø–æ–ª—è
    barcode = _get_text(el, ["barcode", "ean", "gtin", "upc", "Barcode"])
    if barcode:
        return barcode
    # 2) –í–∞—Ä—ñ–∞–Ω—Ç–∏ —á–µ—Ä–µ–∑ <param name="...">
    for p in el.findall(".//param"):
        name = (p.get("name") or p.get("Name") or "").strip()
        if name in BARCODE_PARAM_NAMES and p.text and p.text.strip():
            return p.text.strip()
    return None

def parse_feed_to_json(url: str, *, timeout: int = 30) -> str:
    """
    –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î XML-—Ñ—ñ–¥, –¥—ñ—Å—Ç–∞—î sku, name, barcode —ñ –ø–æ–≤–µ—Ä—Ç–∞—î JSON-—Ä—è–¥–æ–∫:
    [
      {"id": "<sku>", "name": "<name>", "barcode": "<barcode>"},
      ...
    ]
    """
    headers = {"User-Agent": "Mozilla/5.0"}
    resp = requests.get(url, headers=headers, timeout=timeout)
    resp.raise_for_status()

    root = ET.fromstring(resp.text)

    # –¢–∏–ø–æ–≤—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ —Ç–æ–≤–∞—Ä—ñ–≤: <offer> (YML) –∞–±–æ <item>
    product_nodes = root.findall(".//offer") + root.findall(".//item")
    if not product_nodes:
        # –§–æ–ª–±–µ–∫: —è–∫—â–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞, —Å–ø—Ä–æ–±—É—î–º–æ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –¥—Ä—É–≥–æ–≥–æ —Ä—ñ–≤–Ω—è
        product_nodes = [el for el in root.iter() if list(el)]

    items: List[Dict[str, str]] = []

    for node in product_nodes:
        # sku: –ø—Ä–æ–±—É—î–º–æ –ø–æ—à–∏—Ä–µ–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏
        sku = (
            _get_text(node, ["sku", "productId", "code", "id"])
            or node.get("sku")
            or node.get("id")
        )
        name = _get_text(node, ["name", "title"])
        barcode = _extract_barcode(node)

        # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ, —è–∫—â–æ –∫–ª—é—á–æ–≤—ñ –ø–æ–ª—è –≤—ñ–¥—Å—É—Ç–Ω—ñ
        if not (sku and name):
            continue

        items.append({
            "id": str(sku).strip(),
            "name": name,
            "barcode": (barcode or "").strip()
        })

    result_json = json.dumps(items, ensure_ascii=False, indent=2)
    logging.info("–ó—ñ–±—Ä–∞–Ω–æ –ø–æ–∑–∏—Ü—ñ–π: %s", len(items))
    return result_json

if __name__ == "__main__":
    # üîß –í–∫–∞–∂–∏ URL —Ñ—ñ–¥–∞ —Ç—É—Ç –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ —Ç–µ—Å—Ç—É
    FEED_URL = "https://static-opt.biotus.ua/media/amasty/feed/biotus_partner.xml"
    print(parse_feed_to_json(FEED_URL))