import aiohttp
import logging
import datetime
from sqlalchemy.future import select
from app.database import get_async_db, EnterpriseSettings
from app.services.order_sender import send_orders_to_tabletki
from app.services.send_TTN import send_ttn

STATUS_MAP = {
    2: 4,
    12: 6,
    15: 7
    
}

ALIAS_REVERSE = {
    "Novaposhta": "NP",
    "Ukrposhta": "UP"
}

async def check_statuses_key_crm(order: dict, enterprise_code: str, branch: str):
    print(f"üì¶ [KeyCRM] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è {order.get('id')} –¥–ª—è {enterprise_code}")

    async with get_async_db() as session:
        result = await session.execute(
            select(EnterpriseSettings).where(EnterpriseSettings.enterprise_code == enterprise_code)
        )
        enterprise = result.scalars().first()
        if not enterprise or not enterprise.token:
            logging.warning(f"‚ùå API token –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –¥–ª—è {enterprise_code}")
            return

        token = enterprise.token
        headers = {
            "accept": "application/json",
            "Authorization": f"Bearer {token}"
        }

        async with aiohttp.ClientSession() as http_session:
            url = f"https://openapi.keycrm.app/v1/order?filter[source_uuid]={order.get('id')}&include=products,shipping"
            async with http_session.get(url, headers=headers) as resp:
                data = await resp.json()
                seller_order = data.get("data", [])[0] if data.get("data") else None
                logging.info(f"üì¶ –û—Ç–≤–µ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞: {seller_order}")

                if not seller_order:
                    logging.info("‚ùó –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –ø—Ä–æ–¥–∞–≤—Ü—è.")
                    return

                seller_status_id = seller_order.get("status_id")
                mapped_status = STATUS_MAP.get(seller_status_id, 1)

                logging.info(
                    f"üîé –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤: —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–¥–∞–≤—Ü–∞={seller_status_id}, –Ω–∞—à —Å—Ç–∞—Ç—É—Å={order['statusID']}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è={mapped_status}"
                )

                if mapped_status > order["statusID"]:
                    logging.info(f"üìå –°—Ç–∞—Ç—É—Å –ø—Ä–æ–¥–∞–≤—Ü—è: {seller_status_id}, –í–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π —Å—Ç–∞—Ç—É—Å –¥–æ –∑–º—ñ–Ω–∏: {order['statusID']}, –ø—ñ—Å–ª—è –∑–º—ñ–Ω–∏: {mapped_status}")

                    seller_products = seller_order.get("products", [])
                    for i, item in enumerate(order.get("rows", [])):
                        if i < len(seller_products):
                            seller_product = seller_products[i]
                            qty_seller = seller_product.get("quantity", item["qty"])
                            order["rows"][i]["qtyShip"] = qty_seller
                            order["rows"][i]["priceShip"] = seller_product.get("price", item["price"])
                            if qty_seller != item["qty"]:
                                logging.info(f"üîÅ –ó–º—ñ–Ω–µ–Ω–æ qty —Ç–æ–≤–∞—Ä—É {item['goodsCode']}: —Å—Ç–∞—Ä–µ={item['qty']}, –Ω–æ–≤–µ={qty_seller}")
                                order["rows"][i]["qty"] = qty_seller
                            elif qty_seller == 0:
                                logging.warning(f"‚ùå –£ –ø—Ä–æ–¥–∞–≤—Ü—è –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —Ç–æ–≤–∞—Ä {item['goodsCode']}, –∫—ñ–ª—å–∫—ñ—Å—Ç—å = 0 ‚Äî –º–æ–∂–ª–∏–≤–µ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
                        else:
                            logging.warning(f"‚ö†Ô∏è –£ –ø—Ä–æ–¥–∞–≤—Ü—è –≤—ñ–¥—Å—É—Ç–Ω—è –ø–æ–∑–∏—Ü—ñ—è {item['goodsCode']} ‚Äî –ø—Ä–æ–ø—É—â–µ–Ω–æ")

                    order["statusID"] = mapped_status
                    logging.info(f"üì¶ –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ —Ç–æ–≤–∞—Ä–∞–º–∏: {order['rows']}")
                    await send_orders_to_tabletki(session, [order], enterprise.tabletki_login, enterprise.tabletki_password)
                    logging.info(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å –¥–æ {mapped_status} —Ç–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤ Tabletki.ua")
                else:
                    logging.info(f"‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å –ø—Ä–æ–¥–∞–≤—Ü—è ({seller_status_id}) –Ω–µ –≤–∏—â–∏–π –∑–∞ –Ω–∞—à ({order['statusID']}), –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ")

                tracking_code = seller_order.get("shipping", {}).get("tracking_code")
                if tracking_code:
                    delivery_service_id = seller_order.get("shipping", {}).get("delivery_service_id")
                    delivery_alias = ""
                    if delivery_service_id:
                        try:
                            async with http_session.get(
                                "https://openapi.keycrm.app/v1/order/delivery-service?limit=50&page=1&sort=id",
                                headers=headers
                            ) as delivery_resp:
                                delivery_data = await delivery_resp.json()
                                services = delivery_data.get("data", [])
                                matched_service = next((s for s in services if s["id"] == delivery_service_id), None)
                                if matched_service:
                                    delivery_name = matched_service.get("name")
                                    delivery_alias = ALIAS_REVERSE.get(delivery_name, "")
                        except Exception as e:
                            logging.warning(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ delivery_service: {e}")

                    phone_number = seller_order.get("shipping", {}).get("recipient_phone", order.get("customerPhone"))

                    await send_ttn(
                        session=session,
                        id=order["id"],
                        enterprise_code=enterprise_code,
                        ttn=tracking_code,
                        deliveryServiceAlias=delivery_alias,
                        phoneNumber=phone_number
                    )
                    logging.info(f"üì¶ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ TTN: {tracking_code}, {delivery_alias}, {phone_number}")